<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MetaBuilders.Irc</name>
    </assembly>
    <members>
        <member name="T:MetaBuilders.Irc.Messages.UserModeMessage">
            <summary>
            The UserModeMessage allows users to have their mode changed.
            </summary>
            <remarks>
            Modes include such things as invisibility and irc operator.
            This message wraps the MODE command.
            </remarks>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.CommandMessage">
            <summary>
            The base for all message which send a text command.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.IrcMessage">
            <summary>
            The astract base class for all irc messages.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IrcMessage.CreateInstance">
            <summary>
            Creates an instance of whatever type is deriving from IrcMessage.
            This is not meant to be used from application code.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IrcMessage.ToString">
            <summary>
            Generates a string representation of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IrcMessage.Format(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Outputs message content to a provided <see cref="T:MetaBuilders.Irc.Messages.IrcMessageWriter"/> object.
            </summary>
            <param name="writer">The <see cref="T:MetaBuilders.Irc.Messages.IrcMessageWriter"/> object that receives the message content. </param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Adds parameters to the given <see cref="T:MetaBuilders.Irc.Messages.IrcMessageWriter"/> for formatting of the message.
            </summary>
            <remarks>
            When deriving from IrcMessage, override this method to add parameters to the formatted output of the message.
            </remarks>
            <param name="writer">The <see cref="T:MetaBuilders.Irc.Messages.IrcMessageWriter"/> object that receives the message content. </param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IrcMessage.Validate(MetaBuilders.Irc.ServerSupport)">
            <summary>
            Validates this message against the given server support
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IrcMessage.Parse(System.String)">
            <summary>
            Parses the given string to populate this <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IrcMessage.ParseCommand(System.String)">
            <summary>
            Parses the command portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IrcMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameter portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IrcMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IrcMessage.CanParse(System.String)">
            <summary>
            Determines if the message can be parsed by this type.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.IrcMessage.Sender">
            <summary>
            The computer or user who sent the current message.
            </summary>
            <remarks>
            In the case of a server message, the Sender.Nick is the the name that the server calls itself, usually its address.
            In the case of a user message, the Sender is a User containing the Nick, UserName, and HostName..
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CommandMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CommandMessage.CanParse(System.String)">
            <summary>
            Determines if the message can be parsed by this type.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.CommandMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserModeMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserModeMessage.CanParse(System.String)">
            <summary>
            Determines if the message can be parsed by this type.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserModeMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserModeMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.UserModeMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.UserModeMessage.User">
            <summary>
            Gets or sets the affected user.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.UserModeMessage.ModeChanges">
            <summary>
            Gets or sets the mode changes being applied.
            </summary>
            <remarks>
            An example ModeChanges might look like "-w".
            This example means turning off the receipt of wallop message from the server.
            </remarks>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.LusersReplyMessage">
            <summary>
            One of the responses to the <see cref="T:MetaBuilders.Irc.Messages.LusersMessage"/> query.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.NumericMessage">
            <summary>
            The base class for all numeric messages sent from the server to the client.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NumericMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NumericMessage.IsError(System.Int32)">
            <summary>
            Determines if the given numeric is an error message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NumericMessage.IsCommandReply(System.Int32)">
            <summary>
            Determines if the given numeric is a command reply message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NumericMessage.IsDirect(System.Int32)">
            <summary>
            Determines if the given numeric is a direct message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NumericMessage.CanParse(System.String)">
            <summary>
            Determines if the message can be parsed by this type.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NumericMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.NumericMessage.Target">
            <summary>
            Gets or sets the target of the message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.NumericMessage.InternalNumeric">
            <summary>
            Gets the Numeric command of the Message
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LusersReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.LusersReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LusersReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LusersReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LusersReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.LusersReplyMessage.UserCount">
            <summary>
            Gets or sets the number of users connected to irc.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.LusersReplyMessage.InvisibleCount">
            <summary>
            Gets or sets the number of invisible users connected to irc.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.LusersReplyMessage.ServerCount">
            <summary>
            Gets or sets the number of servers connected on the network.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.TooManyTargetsMessage">
            <summary>
            The error recieved when a message containing target parameters has too many targets specified.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ErrorMessage">
            <summary>
            This class of message is sent to a client from a server when something bad happens.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ErrorMessage.InternalNumeric">
            <summary>
            Gets the Numeric command of the Message
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TooManyTargetsMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.TooManyTargetsMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TooManyTargetsMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TooManyTargetsMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TooManyTargetsMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.TooManyTargetsMessage.InvalidTarget">
            <summary>
            Gets or sets the target which was invalid.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.TooManyTargetsMessage.ErrorCode">
            <summary>
            Gets or sets the errorcode
            </summary>
            <remarks>An example error code might be, "Duplicate"</remarks>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.TooManyTargetsMessage.AbortMessage">
            <summary>
            Gets or sets the message explaining what was done about the error.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.TooManyChannelsMessage">
            <summary>
            Sent to a user when they have joined the maximum number of allowed channels and they try to join another channel.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.IChannelTargetedMessage">
            <summary>
            An interface implemented by messages which are, or can be, within the context of a channel.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IChannelTargetedMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TooManyChannelsMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.TooManyChannelsMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TooManyChannelsMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TooManyChannelsMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TooManyChannelsMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TooManyChannelsMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.TooManyChannelsMessage.Channel">
            <summary>
            The channel to which entry was denied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.GenericErrorMessage">
            <summary>
            Represents an error message with a numeric command that is either unparsable or unimplemented.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.GenericErrorMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.GenericErrorMessage.ParseCommand(System.String)">
            <summary>
            Parses the command portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.GenericErrorMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.GenericErrorMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.GenericErrorMessage.Command">
            <summary>
            Gets or sets the Numeric command of the Message
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.GenericErrorMessage.Data">
            <summary>
            Gets the text of the Message
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ErroneousNickMessage">
            <summary>
            Returned after receiving a <see cref="T:MetaBuilders.Irc.Messages.NickChangeMessage"/> which contains characters which do not fall in the defined set.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ErroneousNickMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.ErroneousNickMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ErroneousNickMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ErroneousNickMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ErroneousNickMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ErroneousNickMessage.Nick">
            <summary>
            Gets or sets the nick which wasn't accepted.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WatchListEditorMessage">
            <summary>
            A Message that edits the list of users on your watch list.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WatchMessage">
            <summary>
            A Message that participates in the Watch framework.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchMessage.Validate(MetaBuilders.Irc.ServerSupport)">
            <summary>
            Validates this message against the given server support
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WatchMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchListEditorMessage.CanParse(System.String)">
            <summary>
            Determines if the message can be parsed by this type.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchListEditorMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchListEditorMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchListEditorMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WatchListEditorMessage.AddedNicks">
            <summary>
            Gets the collection of nicks being added to the watch list.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WatchListEditorMessage.RemovedNicks">
            <summary>
            Gets the collection of nicks being removed from the watch list.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.TimeReplyMessage">
            <summary>
            The reply to the <see cref="T:MetaBuilders.Irc.Messages.TimeRequestMessage"/> query.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.CtcpReplyMessage">
            <summary>
            The base class for all ctcp reply messages.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.CtcpMessage">
            <summary>
            A Message which carries a ctcp command.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.IQueryTargetedMessage">
            <summary>
            An interface implemented by messages which are, or can be, within the context of a query with a user.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IQueryTargetedMessage.IsQueryToUser(MetaBuilders.Irc.User)">
            <summary>
            Determines if the the current message is targeted at a query with the given user.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CtcpMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CtcpMessage.CanParse(System.String)">
            <summary>
            Determines if the message can be parsed by this type.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CtcpMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CtcpMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CtcpMessage.IsQueryToUser(MetaBuilders.Irc.User)">
            <summary>
            Determines if the current message is targeted at a query to the given user.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.CtcpMessage.Target">
            <summary>
            Gets the targets of this <see cref="T:MetaBuilders.Irc.Messages.CtcpMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.CtcpMessage.InternalCommand">
            <summary>
            Gets the ctcp Command requested.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.CtcpMessage.ExtendedData">
            <summary>
            Gets the data payload of the Ctcp request.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.CtcpMessage.TransportCommand">
            <summary>
            Gets the irc command used to send the ctcp command to another user.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.CtcpReplyMessage.TransportCommand">
            <summary>
            Gets the irc command used to send the ctcp command to another user.
            </summary>
            <remarks>
            A reply message uses the NOTICE command for transport.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TimeReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.TimeReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TimeReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TimeReplyMessage.Parse(System.String)">
            <summary>
            Parses the given string to populate this <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.TimeReplyMessage.CurrentTime">
            <summary>
            Gets or sets the time, sent in any format the client finds useful.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.TimeReplyMessage.ExtendedData">
            <summary>
            Gets the data payload of the Ctcp request.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.LimitMode">
            <summary>
            A user limit may be set on channels by using this mode.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.FlagMode">
            <summary>
            The modes in this category are used to define properties which affects how channels operate. 
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.ChannelMode">
            <summary>
            A channel mode sent in a <see cref="T:MetaBuilders.Irc.Messages.ChannelModeMessage"/> in its <see cref="P:MetaBuilders.Irc.Messages.ChannelModeMessage.ModeChanges"/> property.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ChannelMode.ToString">
            <summary>
            A string representation of the mode.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ChannelMode.ApplyTo(MetaBuilders.Irc.Messages.ChannelModeMessage,System.Boolean)">
            <summary>
            Applies the mode to the given <see cref="T:MetaBuilders.Irc.Messages.ChannelModeMessage"/>.
            </summary>
            <param name="msg">The message which will be modified to include this mode.</param>
            <param name="includeAction">Specifies if the action modifier should be applied.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ChannelMode.AddChanges(MetaBuilders.Irc.Messages.ChannelModeMessage,System.Boolean)">
            <summary>
            Applies this mode to the ModeChanges property of the given <see cref="T:MetaBuilders.Irc.Messages.ChannelModeMessage"/>.
            </summary>
            <param name="msg">The message which will be modified to include this mode.</param>
            <param name="includeAction">Specifies if the action modifier should be applied.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ChannelMode.AddParameter(MetaBuilders.Irc.Messages.ChannelModeMessage)">
            <summary>
            Applies this mode to the ModeArguments property of the given <see cref="T:MetaBuilders.Irc.Messages.ChannelModeMessage"/>.
            </summary>
            <param name="msg">The message which will be modified to include this mode.</param>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.ChannelMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.ChannelMode.Action">
            <summary>
            Gets or sets the <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/> applied.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.LimitMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.LimitMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.LimitMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.LimitMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.LimitMode.#ctor(MetaBuilders.Irc.Messages.ModeAction,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.LimitMode"/> class 
            with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/> and user limit.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.LimitMode.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.LimitMode"/> class 
            with the given user limit.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.LimitMode.AddParameter(MetaBuilders.Irc.Messages.ChannelModeMessage)">
            <summary>
            Applies this mode to the ModeArguments property of the given <see cref="T:MetaBuilders.Irc.Messages.ChannelModeMessage"/>.
            </summary>
            <param name="msg">The message which will be modified to include this mode.</param>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.LimitMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.LimitMode.UserLimit">
            <summary>
            Gets or sets the maximum number of users allowed to join the channel.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.InviteMessage">
            <summary>
            The InviteMessage is used to invite users to a channel.
            </summary>
            <remarks>
            This message wraps the INVITE command.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.InviteMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.InviteMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.InviteMessage.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.InviteMessage"/> class with the given channel and nick.
            </summary>
            <param name="channel">The channel the person is being invited into.</param>
            <param name="nick">The nick of the user invited</param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.InviteMessage.Validate(MetaBuilders.Irc.ServerSupport)">
            <summary>
            Validates this message against the given server support
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.InviteMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.InviteMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.InviteMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.InviteMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.InviteMessage.Channel">
            <summary>
            Gets or sets the channel the person is being invited into.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.InviteMessage.Nick">
            <summary>
            Gets or sets the nick of the user invited
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.InviteMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ChannelModeMessage">
            <summary>
            The ChannelModeMessage allows channels to have their mode changed. 
            </summary>
            <remarks>
            Modes include such things as channel user limits and passwords, as well as the bans list and settings ops.
            This message wraps the MODE command.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelModeMessage.#ctor">
            <summary>
            Creates a new instance of the ChannelModeMessage class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelModeMessage.#ctor(System.String,System.String,System.String[])">
            <summary>
            Creates a new instance of the ChannelModeMessage class and applies the given parameters.
            </summary>
            <param name="channel">The name of the channel being affected.</param>
            <param name="modeChanges">The mode changes being applied.</param>
            <param name="modeArguments">The arguments ( parameters ) for the <see cref="P:MetaBuilders.Irc.Messages.ChannelModeMessage.ModeChanges"/> property.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelModeMessage.CanParse(System.String)">
            <summary>
            Determines if the message can be parsed by this type.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelModeMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelModeMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelModeMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelModeMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelModeMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelModeMessage.Channel">
            <summary>
            Gets or sets the name of the channel being affected.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelModeMessage.ModeChanges">
            <summary>
            Gets or sets the mode changes being applied.
            </summary>
            <remarks>
            An example ModeChanges might look like "+ool".
            This means adding the cannel op mode for two users, and setting a limit on the user count.
            </remarks>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelModeMessage.ModeArguments">
            <summary>
            Gets the collection of arguments ( parameters ) for the <see cref="P:MetaBuilders.Irc.Messages.ChannelModeMessage.ModeChanges"/> property.
            </summary>
            <remarks>
            Some modes require a parameter, such as +o requires the mask of the person to be given ops.
            </remarks>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ChannelRequiresRegisteredNickMessage">
            <summary>
            The ErrorMessage received when attempting to join a channel which requires a registered nick, 
            and the user does not have one.
            </summary>
            <remarks>
            A channel can require a key with the ChannelModeMessage with a KeyMode.
            The key must be set on the JoinMessage to join such channels.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelRequiresRegisteredNickMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.ChannelRequiresRegisteredNickMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelRequiresRegisteredNickMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelRequiresRegisteredNickMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelRequiresRegisteredNickMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelRequiresRegisteredNickMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelRequiresRegisteredNickMessage.Channel">
            <summary>
            Gets or sets the channel which has a key
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ChannelRequiresKeyMessage">
            <summary>
            The ErrorMessage received when attempting to join a channel which has a key set, and the user has not provided it.
            </summary>
            <remarks>
            A channel can require a key with the ChannelModeMessage with a RegisteredNicksOnlyMode.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelRequiresKeyMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.ChannelRequiresKeyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelRequiresKeyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelRequiresKeyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelRequiresKeyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelRequiresKeyMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelRequiresKeyMessage.Channel">
            <summary>
            Gets or sets the channel which has a key
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.AcceptAlreadyExistsMessage">
            <summary>
            The ErrorMessage received when the client attempts to add a nick to his accept list
            when that nick is already on the list.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AcceptAlreadyExistsMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.AcceptAlreadyExistsMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AcceptAlreadyExistsMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AcceptAlreadyExistsMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AcceptAlreadyExistsMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.AcceptAlreadyExistsMessage.Nick">
            <summary>
            Gets or sets the nick which wasn't added
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.CancelIrcMessageEventArgs`1">
            <summary>
            The information for a handler of an IrcMessage event which can be canceled.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CancelIrcMessageEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MetaBuilders.Irc.Messages.IrcMessageEventArgs`1"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.CancelIrcMessageEventArgs`1.Message">
            <summary>
            Gets or sets the Message for the event.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.CancelIrcMessageEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether the event should be canceled.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Channel">
            <summary>
            Represents a single irc channel, with it's users.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Channel.#ctor(MetaBuilders.Irc.Client)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Channel"/> class on the given client.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Channel.#ctor(MetaBuilders.Irc.Client,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Channel"/> class on the given client with the given name.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Channel.GetStatusForUser(MetaBuilders.Irc.User)">
            <summary>
            Gets the status for the given <see cref="T:User"/> in the channel.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Channel.SetStatusForUser(MetaBuilders.Irc.User,MetaBuilders.Irc.ChannelStatus)">
            <summary>
            Applies the given <see cref="T:ChannelStatus"/> to the given <see cref="T:User"/> in the channel.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Channel.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:MetaBuilders.Irc.Channel.Properties">
            <summary>
            Gets the collection of general properties assigned to this channel
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Channel.Client">
            <summary>
            Gets the client which the channel is on.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Channel.Open">
            <summary>
            Gets or sets whether the channel is currently open
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Channel.Name">
            <summary>
            Gets or sets the name of the channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Channel.Topic">
            <summary>
            Gets or sets the topic of the channel
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Channel.TopicSetter">
            <summary>
            Gets or sets the user which set the current topic
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Channel.TopicSetTime">
            <summary>
            Gets or sets the time which topic was set
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Channel.Users">
            <summary>
            Gets the users in the channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Channel.Modes">
            <summary>
            Gets the modes in the channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Channel.Journal">
            <summary>
            Gets the journal of messages on the channel
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Channel.PropertyChanged">
            <summary>
            The event raised when a property on the object changes.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Channel.UserStatusMap.RemoveAll(System.Predicate{System.Collections.Generic.KeyValuePair{MetaBuilders.Irc.User,MetaBuilders.Irc.ChannelStatus}})">
            <summary>
            Removes all of the items from the dictionary which the given predictate matches.
            </summary>
            <returns>The number of items removed from the dictionary.</returns>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.ReceiveServerNoticesMode">
            <summary>
            This mode signifies that the user will receive wallop messages.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.UserMode">
            <summary>
            The list of known user modes sent in a <see cref="T:MetaBuilders.Irc.Messages.UserModeMessage"/> in its <see cref="P:MetaBuilders.Irc.Messages.UserModeMessage.ModeChanges"/> property.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.UserMode.ToString">
            <summary>
            A string representation of the mode.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.UserMode.ApplyTo(MetaBuilders.Irc.Messages.UserModeMessage,System.Boolean)">
            <summary>
            Applies the mode to the given <see cref="T:MetaBuilders.Irc.Messages.UserModeMessage"/>.
            </summary>
            <param name="msg">The message which will be modified to include this mode.</param>
            <param name="includeAction">Specifies if the action modifier should be applied.</param>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.UserMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.UserMode.Action">
            <summary>
            Gets or sets the <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/> applied.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ReceiveServerNoticesMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.ReceiveServerNoticesMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ReceiveServerNoticesMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.ReceiveServerNoticesMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.ReceiveServerNoticesMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.ReceiveILineFullNoticesMode">
            <summary>
            This mode signifies that the user will receive 'I-line is full' messages.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ReceiveILineFullNoticesMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.ReceiveILineFullNoticesMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ReceiveILineFullNoticesMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.ReceiveILineFullNoticesMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.ReceiveILineFullNoticesMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ChannelScopedNoticeMessage">
            <summary>
            This message is a notice message which is scoped to the current channel.
            </summary>
            <remarks>
            This is a non-standard message.
            This command exists because many servers limit the number of standard notice messages
            you can send in a time frame. However, they will let channel operators send this notice message
            as often as they want to people who are in that channel.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelScopedNoticeMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ChannelScopedNoticeMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelScopedNoticeMessage.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ChannelScopedNoticeMessage"/> class with the given text string.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelScopedNoticeMessage.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ChannelScopedNoticeMessage"/> class with the given text string and target channel or user.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelScopedNoticeMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelScopedNoticeMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelScopedNoticeMessage.Validate(MetaBuilders.Irc.ServerSupport)">
            <summary>
            Validates this message against the given server support
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelScopedNoticeMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelScopedNoticeMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelScopedNoticeMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelScopedNoticeMessage.Text">
            <summary>
            Gets or sets the actual text of this message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelScopedNoticeMessage.Target">
            <summary>
            Gets or sets the target of this message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelScopedNoticeMessage.Channel">
            <summary>
            Gets or sets the channel which this message is scoped to.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ServerTimeReplyMessage">
            <summary>
            This is the reply to the <see cref="T:MetaBuilders.Irc.Messages.TimeMessage"/> server query.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ServerTimeReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ServerTimeReplyMessage"/> class
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ServerTimeReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ServerTimeReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ServerTimeReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ServerTimeReplyMessage.Server">
            <summary>
            Gets or sets the server replying to the time request.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ServerTimeReplyMessage.Time">
            <summary>
            Gets or sets the time value requested.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ChannelModeIsReplyMessage">
            <summary>
            This is the reply to an empty <see cref="T:MetaBuilders.Irc.Messages.ChannelModeMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelModeIsReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ChannelModeIsReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelModeIsReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelModeIsReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelModeIsReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelModeIsReplyMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelModeIsReplyMessage.Channel">
            <summary>
            Gets or sets the channel reffered to.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelModeIsReplyMessage.Modes">
            <summary>
            Gets or sets the modes in effect.
            </summary>
            <remarks>
            An example Modes might look like "+ml".
            </remarks>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelModeIsReplyMessage.ModeArguments">
            <summary>
            Gets the collection of arguments ( parameters ) for the <see cref="P:MetaBuilders.Irc.Messages.ChannelModeIsReplyMessage.Modes"/> property.
            </summary>
            <remarks>
            Some modes require a parameter, such as +l ( user limit ) requires the number being limited to.
            </remarks>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WatchListClearMessage">
            <summary>
            A Message that clears the list of users on your watch list.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchListClearMessage.CanParse(System.String)">
            <summary>
            Determines if the message can be parsed by this type.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchListClearMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchListClearMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ClientInfoReplyMessage">
            <summary>
            The reply to a <see cref="T:MetaBuilders.Irc.Messages.ClientInfoRequestMessage"/>, giving the human-readable response to the request.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ClientInfoReplyMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.ClientInfoReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ClientInfoReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ClientInfoReplyMessage.Parse(System.String)">
            <summary>
            Parses the given string to populate this <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ClientInfoReplyMessage.Response">
            <summary>
            Gets or sets the response to the request's query.
            </summary>
            <remarks>
            This is only intended to be read by humans.
            It should be as complete and specific as the incoming request.
            </remarks>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ClientInfoReplyMessage.ExtendedData">
            <summary>
            Gets the data payload of the Ctcp request.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Dcc.DccServerConnection">
            <summary>
            The DccServerConnection is used after sending a <see cref="T:MetaBuilders.Irc.Messages.DccSendRequestMessage"/> to send the file to the target.
            </summary>
            <remarks>
            The nature of dcc sending is such that this class will create a listening server on the given port.
            If the target of the <see cref="T:MetaBuilders.Irc.Messages.DccSendRequestMessage"/> decides to connect to the server, this class will send the file.
            Set a <see cref="P:MetaBuilders.Irc.Dcc.DccServerConnection.TimeOut"/> to have the server stop after the given amount of time, 
            in case the target ignores the initial message.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Dcc.DccServerConnection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MetaBuilders.Irc.Dcc.DccServerConnection"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Dcc.DccServerConnection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MetaBuilders.Irc.Dcc.DccServerConnection"/> class on the given port.
            </summary>
            <param name="port">The port to listen on.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Dcc.DccServerConnection.OnConnecting(System.EventArgs)">
            <summary>
            Raises the <see cref="E:MetaBuilders.Irc.Dcc.DccServerConnection.Connecting"/> event of the <see cref="T:MetaBuilders.Irc.Dcc.DccServerConnection"/> object.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Dcc.DccServerConnection.OnConnected(System.EventArgs)">
            <summary>
            Raises the <see cref="E:MetaBuilders.Irc.Dcc.DccServerConnection.Connected"/> event of the <see cref="T:MetaBuilders.Irc.Dcc.DccServerConnection"/> object.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Dcc.DccServerConnection.OnDisconnected(MetaBuilders.Irc.Network.ConnectionDataEventArgs)">
            <summary>
            Raises the <see cref="E:MetaBuilders.Irc.Dcc.DccServerConnection.Disconnected"/> event of the <see cref="T:MetaBuilders.Irc.Dcc.DccServerConnection"/> object.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Dcc.DccServerConnection.Send">
            <summary>
            Attempts to send the file specified in the current <see cref="P:MetaBuilders.Irc.Dcc.DccServerConnection.Transfer"/> information.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Dcc.DccServerConnection.Disconnect">
            <summary>
            Closes the current network connection.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Dcc.DccServerConnection.DisconnectForce">
            <summary>
            Forces closing the current network connection and kills the thread running it.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Dcc.DccServerConnection.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the <see cref="T:MetaBuilders.Irc.Dcc.DccServerConnection"/>
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Dcc.DccServerConnection.Connecting">
            <summary>
            Occurs when starting the connecting sequence to a server
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Dcc.DccServerConnection.Connected">
            <summary>
            Occurs after the connecting sequence is successful.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Dcc.DccServerConnection.Disconnected">
            <summary>
            Occurs when the disconnecting sequence is successful.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Dcc.DccServerConnection.Port">
            <summary>
            Gets or sets the port which the <see cref="T:MetaBuilders.Irc.Dcc.DccServerConnection"/> will communicate over.
            </summary>
            <remarks>
            <para>A <see cref="T:System.NotSupportedException"/> will be thrown if an attempt is made to change the <see cref="P:MetaBuilders.Irc.Dcc.DccServerConnection.Port"/> if the <see cref="P:MetaBuilders.Irc.Dcc.DccServerConnection.Status"/> is not <see cref="F:MetaBuilders.Irc.Network.ConnectionStatus.Disconnected"/>.</para>
            </remarks>
        </member>
        <member name="P:MetaBuilders.Irc.Dcc.DccServerConnection.TimeOut">
            <summary>
            Gets or sets the length of time to wait after calling <see cref="M:MetaBuilders.Irc.Dcc.DccServerConnection.Send"/> before the thread will stop waiting for a connection.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Dcc.DccServerConnection.Status">
            <summary>
            Gets the <see cref="T:MetaBuilders.Irc.Network.ConnectionStatus"/> of the <see cref="T:MetaBuilders.Irc.Dcc.DccServerConnection"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Dcc.DccServerConnection.SynchronizationObject">
            <summary>
            Gets or sets the <see cref="T:System.ComponentModel.ISynchronizeInvoke"/> implementor which will be used to synchronize threads and events.
            </summary>
            <remarks>
            This is usually the main form of the application.
            </remarks>
        </member>
        <member name="P:MetaBuilders.Irc.Dcc.DccServerConnection.Transfer">
            <summary>
            Gets the transfer information for the connection.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WatchedUserChangedMessage">
            <summary>
            A Watch system notification that a watched user's status has changed
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchedUserChangedMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchedUserChangedMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WatchedUserChangedMessage.WatchedUser">
            <summary>
            Gets or sets the watched User who's status has changed.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WatchedUserChangedMessage.TimeOfChange">
            <summary>
            Gets or sets the time at which the change occured.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WatchedUserChangedMessage.ChangeMessage">
            <exclude />
        </member>
        <member name="T:MetaBuilders.Irc.Messages.UnknownCommandMessage">
            <summary>
            The ErrorMessage sent when a command is sent to a server which didn't recognize it.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UnknownCommandMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.TooManyLinesMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UnknownCommandMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UnknownCommandMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UnknownCommandMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.UnknownCommandMessage.Command">
            <summary>
            Gets or sets the command which caused the error.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.NoTextToSendMessage">
            <summary>
            The ErrorMessage sent when a TextMessage is sent with an empty Text property.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoTextToSendMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.NoTextToSendMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoTextToSendMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see href="IrcMessage.AddParametersToFormat" />
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoTextToSendMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.AcceptListFullMessage">
            <summary>
            The ErrorMessage received when a user adds too many users to his Accept list.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AcceptListFullMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.BanListFullMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AcceptListFullMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AcceptListFullMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.MonitorListClearMessage">
            <summary>
            A Monitor system message that clears the list of users on your monitor list.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.MonitorMessage">
            <summary>
            A Message that participates in the Monitor system.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitorMessage.Validate(MetaBuilders.Irc.ServerSupport)">
            <summary>
            Validates this message against the given server support
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.MonitorMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitorListClearMessage.CanParse(System.String)">
            <summary>
            Determines if the message can be parsed by this type.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitorListClearMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitorListClearMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.MonitorRemoveUsersMessage">
            <summary>
            A Monitor system message that removes users to your monitor list.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitorRemoveUsersMessage.CanParse(System.String)">
            <summary>
            Determines if the message can be parsed by this type.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitorRemoveUsersMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitorRemoveUsersMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitorRemoveUsersMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.MonitorRemoveUsersMessage.Nicks">
            <summary>
            Gets the collection of nicks being removed from the monitor list.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.LinksEndReplyMessage">
            <summary>
            Marks the end of the replies to the <see cref="T:MetaBuilders.Irc.Messages.LinksMessage"/> query.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LinksEndReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.LinksEndReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LinksEndReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LinksEndReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LinksEndReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.LinksEndReplyMessage.Mask">
            <summary>
            Gets or sets the server mask that the links list used.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.GenericNumericMessage">
            <summary>
            Represents a message with a numeric command that is either unparsable or unimplemented.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.GenericNumericMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.GenericNumericMessage.ParseCommand(System.String)">
            <summary>
            Parses the command portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.GenericNumericMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.GenericNumericMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.GenericNumericMessage.Command">
            <summary>
            Gets the Numeric command of the Message
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.GenericNumericMessage.Data">
            <summary>
            Gets the text of the Message
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.NoSuchNickMessage">
            <summary>
            Used to indicate the nickname parameter supplied to a command is currently unused.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoSuchNickMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.NoSuchNickMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoSuchNickMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoSuchNickMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoSuchNickMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.NoSuchNickMessage.Nick">
            <summary>
            Gets or sets the nick which wasn't accepted.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.BackMessage">
            <summary>
            With the BackMessage, clients can set disable the automatic reply string set by an <see cref="T:MetaBuilders.Irc.Messages.AwayMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.BackMessage.CanParse(System.String)">
            <summary>
            Determines if the message can be parsed by this type.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.BackMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.BackMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ScriptRequestMessage">
            <summary>
            Sends a request for the script version of the target's client.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.CtcpRequestMessage">
            <summary>
            The base class for all ctcp request messages.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.CtcpRequestMessage.TransportCommand">
            <summary>
            Gets the irc command used to send the ctcp command to another user.
            </summary>
            <remarks>
            A request message uses the PRIVMSG command for transport.
            </remarks>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.CtcpRequestMessage.ExtendedData">
            <summary>
            Gets the data payload of the Ctcp request.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ScriptRequestMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ScriptRequestMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ScriptRequestMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ErrorReplyMessage">
            <summary>
            This reply should be sent whenever a client receives a <see cref="T:MetaBuilders.Irc.Messages.CtcpRequestMessage"/> that is not understood or is malformed.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ErrorReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ErrorReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ErrorReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ErrorReplyMessage.Parse(System.String)">
            <summary>
            Parses the given string to populate this <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ErrorReplyMessage.Query">
            <summary>
            Gets or sets the text of the query which couldn't be processed.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ErrorReplyMessage.Reason">
            <summary>
            Gets or sets the reason the request couldn't be processed.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ErrorReplyMessage.ExtendedData">
            <summary>
            Gets the data payload of the Ctcp request.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ListMessage">
            <summary>
            The <see cref="T:MetaBuilders.Irc.Messages.ListMessage"/> is used to list channels and their topics.
            </summary>
            <remarks>
            A server sent a <see cref="T:MetaBuilders.Irc.Messages.ListMessage"/> will reply with a 
            <see cref="T:MetaBuilders.Irc.Messages.ListStartReplyMessage"/>, <see cref="T:MetaBuilders.Irc.Messages.ListReplyMessage"/>, and a <see cref="T:MetaBuilders.Irc.Messages.ListEndReplyMessage"/>.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ListMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ListMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ListMessage.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ListMessage"/> class with the given channel.
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ListMessage.Validate(MetaBuilders.Irc.ServerSupport)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ListMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ListMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ListMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ListMessage.Channels">
            <summary>
            Gets the channels to get info about.
            </summary>
            <remarks>
            If this is empty, information about all channels is requested.
            </remarks>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ListMessage.Server">
            <summary>
            Gets or sets the server that should return the info.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ListMessage.MaxUsers">
            <summary>
            Gets or sets the maximum number of users that channels can have to be returned.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ListMessage.MinUsers">
            <summary>
            Gets or sets the minimum number of users that channels can have to be returned.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ListMessage.YoungerThan">
            <summary>
            Gets or sets, in minutes, the longest amount of time 
            which may have passed since a channel was created in order to be returned.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ListMessage.OlderThan">
            <summary>
            Gets or sets, in minutes, the shortest amount of time 
            which may have passed since a channel was created in order to be returned.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ListMessage.MatchMask">
            <summary>
            Gets or sets the a mask which a channel must match to be returned.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ListMessage.NotMatchMask">
            <summary>
            Gets or sets a mask which a channel cannot match to be returned.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ListMessage.TopicOlderThan">
            <summary>
            Gets or sets, in minutes, the shortest amount of time 
            which may have passed since a channel's topic was changed, to be returned.
            </summary>
            <remarks>
            Setting this property to "5" will cause only channels to be returned where their
            topic hasn't been changed in the last 5 minutes.
            </remarks>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ListMessage.TopicYoungerThan">
            <summary>
            Gets or sets, in minutes, the longest amount of time 
            which may have passed since a channel's topic was changed, to be returned.
            </summary>
            <remarks>
            Setting this property to "5" will cause only channels to be returned where their
            topic has been changed in the last 5 minutes.
            </remarks>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ListMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.DccRequestMessage">
            <summary>
            The base for dcc request messages.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.DccRequestMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.DccRequestMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.DccRequestMessage.CanParse(System.String)">
            <summary>
            Determines if the message can be parsed by this type.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.DccRequestMessage.CanParseDccCommand(System.String)">
            <summary>
            Determines if the message's DCC command is compatible with this message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.DccRequestMessage.Parse(System.String)">
            <summary>
            Parses the given string to populate this <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.DccRequestMessage.ExtendedData">
            <summary>
            Gets the data payload of the Ctcp request.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.DccRequestMessage.DccCommand">
            <summary>
            Gets the dcc sub-command.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.DccRequestMessage.DccArgument">
            <summary>
            Gets the dcc sub-command's argument.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.DccRequestMessage.Address">
            <summary>
            Gets or sets the host address on which the initiator expects the connection.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.DccRequestMessage.Port">
            <summary>
            Gets or sets the port on which the initiator expects the connection.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WatchedUserOnlineMessage">
            <summary>
            A Watch system notification that a watched user is offline
            </summary>
            <remarks>
            This message may either be a WatchedUserIsOfflineMessage or a WatchedUserNowOfflineMessage.
            Both messages have the same api and have the same impact for any watch tracking component,
            but are replies sent in reponse to different commands.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchedUserOnlineMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.NotEnoughParametersMessage">
            <summary>
            The ErrorMessage sent when a command is sent which doesn't contain all the required parameters
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NotEnoughParametersMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.NotEnoughParametersMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NotEnoughParametersMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NotEnoughParametersMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NotEnoughParametersMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.NotEnoughParametersMessage.Command">
            <summary>
            Gets or sets the command sent
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.UnknownUserModeMessage">
            <summary>
            The ErrorMessage received when a UserModeMessage was sent with a UserMode which the server didn't recognize.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UnknownUserModeMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.UnknownUserModeMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UnknownUserModeMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UnknownUserModeMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WhoWasMessage">
            <summary>
            Requests information about a user who is no longer connected to irc.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoWasMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoWasMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoWasMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoWasMessage.Nick">
            <summary>
            Gets or sets the nick of the user being examined.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoWasMessage.Server">
            <summary>
            Gets or sets the server that should search for the information.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoWasMessage.MaximumResults">
            <summary>
            Gets or sets the maximum number of results to receive.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoWasMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.UserHostMessage">
            <summary>
            Requests information about the nicks supplied in the Nick property.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserHostMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserHostMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserHostMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.UserHostMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.UserHostMessage.Nicks">
            <summary>
            Gets the collection of nicks to request information for.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.NetworkOperatorMode">
            <summary>
            This mode signifies that the user is an operator on the current network.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.NetworkOperatorMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.NetworkOperatorMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.NetworkOperatorMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.NetworkOperatorMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.NetworkOperatorMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.CallerIdMode">
            <summary>
            This mode signifies that the user using CallerId.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.CallerIdMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.CallerIdMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.CallerIdMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.CallerIdMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.CallerIdMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WhoWasEndReplyMessage">
            <summary>
            Signals the end of a reply to a <see cref="T:MetaBuilders.Irc.Messages.WhoWasMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoWasEndReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.WhoWasEndReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoWasEndReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoWasEndReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoWasEndReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoWasEndReplyMessage.Nick">
            <summary>
            Gets or sets the nick of the user being examined.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WhoIsServerReplyMessage">
            <summary>
            A reply to a <see cref="T:MetaBuilders.Irc.Messages.WhoIsMessage"/> that specifies what server they are on.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsServerReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.WhoIsServerReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsServerReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsServerReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsServerReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoIsServerReplyMessage.Nick">
            <summary>
            Gets or sets the nick of the user being examined.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoIsServerReplyMessage.ServerName">
            <summary>
            Gets or sets the name of the server the user is connected to.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoIsServerReplyMessage.Info">
            <summary>
            Gets or sets additional information about the user's server connection.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WhoIsChannelsReplyMessage">
            <summary>
            Reply to a <see cref="T:MetaBuilders.Irc.Messages.WhoIsMessage"/>, stating the channels a user is in.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsChannelsReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.WhoIsChannelsReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsChannelsReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsChannelsReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsChannelsReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsChannelsReplyMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoIsChannelsReplyMessage.Nick">
            <summary>
            Gets or sets the Nick of the user being 
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoIsChannelsReplyMessage.Channels">
            <summary>
            Gets the collection of channels the user is a member of.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ServerInfoMessage">
            <summary>
            Contains basic information about a server.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ServerInfoMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ServerInfoMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ServerInfoMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ServerInfoMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ServerInfoMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ServerInfoMessage.ServerName">
            <summary>
            Gets or sets the name of the server being referenced.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ServerInfoMessage.Version">
            <summary>
            Gets or sets the version of the server.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ServerInfoMessage.UserModes">
            <summary>
            Gets or sets the user modes supported by this server.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ServerInfoMessage.ChannelModes">
            <summary>
            Gets or sets the channel modes supported by this server.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ServerInfoMessage.ChannelModesWithParams">
            <summary>
            Gets or sets the channel modes that require a parameter.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ServerInfoMessage.UserModesWithParams">
            <summary>
            Gets or sets the user modes that require a parameter.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ServerInfoMessage.ServerModes">
            <summary>
            Gets or sets the server modes supported by this server.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ServerInfoMessage.ServerModesWithParams">
            <summary>
            Gets or sets the server modes which require parameters.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.OperReplyMessage">
            <summary>
            This message is sent when the client has been elevated to network operator status.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.OperReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.OperReplyMessage"/> class
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.OperReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.OperReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.MotdEndReplyMessage">
            <summary>
            Signifies the end of the motd sent by the server.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MotdEndReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.MotdEndReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MotdEndReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MotdEndReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.UserInfoRequestMessage">
            <summary>
            Sends a request for user info from the target client.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserInfoRequestMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.UserInfoRequestMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserInfoRequestMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.PasswordMessage">
            <summary>
            The PasswordMessage is used to set a 'connection password'.
            </summary>
            <remarks>
            The password can and must be set before any attempt to register the connection is made. 
            Currently this requires that clients send a PASS command before sending the NICK/USER combination
            and servers *must* send a PASS command before any SERVER command. 
            The password supplied must match the one contained in the C/N lines (for servers) or I lines (for clients). 
            It is possible to send multiple PASS commands before registering 
            but only the last one sent is used for verification and it may not be changed once registered.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.PasswordMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.PasswordMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.PasswordMessage.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.PasswordMessage"/> class with the given password.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.PasswordMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.PasswordMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.PasswordMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.PasswordMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.PasswordMessage.Password">
            <summary>
            Gets or sets the password for the sender.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.UnknownChannelMode">
            <summary>
            A channel mode sent in a <see cref="T:MetaBuilders.Irc.Messages.ChannelModeMessage"/> which is not known.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.UnknownChannelMode.#ctor(MetaBuilders.Irc.Messages.ModeAction,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.UnknownChannelMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/> and value.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.UnknownChannelMode.#ctor(MetaBuilders.Irc.Messages.ModeAction,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.UnknownChannelMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>, value, and parameter.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.UnknownChannelMode.AddParameter(MetaBuilders.Irc.Messages.ChannelModeMessage)">
            <summary>
            Applies this mode to the ModeArguments property of the given <see cref="T:MetaBuilders.Irc.Messages.ChannelModeMessage"/>.
            </summary>
            <param name="msg">The message which will be modified to include this mode.</param>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.UnknownChannelMode.Parameter">
            <summary>
            Gets or sets the parameter passed with this mode.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.UnknownChannelMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.QuietMode">
            <summary>
            This mode restricts the type of data sent to users about the channel operations: 
            other user joins, parts and nick changes are not sent. 
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.QuietMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.QuietMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.QuietMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.QuietMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.QuietMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.NoOutsideMessagesMode">
            <summary>
            When this mode is set, only channel members can send messages to the channel.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.NoOutsideMessagesMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.NoOutsideMessagesMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.NoOutsideMessagesMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.NoOutsideMessagesMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.NoOutsideMessagesMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.KeyMode">
            <summary>
            This mode sets or unsets a password on a channel.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.KeyMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.KeyMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.KeyMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.KeyMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.KeyMode.#ctor(MetaBuilders.Irc.Messages.ModeAction,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.KeyMode"/> class 
            with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/> and password.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.KeyMode.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.KeyMode"/> class 
            with the given password.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.KeyMode.AddParameter(MetaBuilders.Irc.Messages.ChannelModeMessage)">
            <summary>
            Applies this mode to the ModeArguments property of the given <see cref="T:MetaBuilders.Irc.Messages.ChannelModeMessage"/>.
            </summary>
            <param name="msg">The message which will be modified to include this mode.</param>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.KeyMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.KeyMode.Password">
            <summary>
            Gets or sets the password needed to gain access to a channel.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.JoinMessage">
            <summary>
            The JoinMessage is used by client to start listening a specific channel. 
            </summary>
            <remarks>
            Whether or not a client is allowed to join a channel is checked only by the server the client is connected to;
            all other servers automatically add the user to the channel when it is received from other servers.
            This message wraps the JOIN command.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.JoinMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.JoinMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.JoinMessage.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.JoinMessage"/> class with the given channel.
            </summary>
            <param name="channel">The name of the channel to join.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.JoinMessage.Validate(MetaBuilders.Irc.ServerSupport)">
            <summary>
            Validates this message against the given server support
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.JoinMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.JoinMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.JoinMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.JoinMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.JoinMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.JoinMessage.Channels">
            <summary>
            Gets the channel names joined
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.JoinMessage.Keys">
            <summary>
            Gets the key (password) of the channels
            </summary>
            <remarks>Only relevant for channels that have a key</remarks>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WatchedUserIsOnlineMessage">
            <summary>
            A Watch system notification that a user is online.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchedUserIsOnlineMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.WatchedUserIsOnlineMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WatchedUserIsOnlineMessage.ChangeMessage">
            <exclude />
        </member>
        <member name="T:MetaBuilders.Irc.Messages.UserNotificationServerSideMessage">
            <summary>
            The UserNotificationServerSideMessage is passed between servers to notify of a new user on the network.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserNotificationServerSideMessage.CanParse(System.String)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserNotificationServerSideMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserNotificationServerSideMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserNotificationServerSideMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.UserNotificationServerSideMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.UserNotificationServerSideMessage.UserName">
            <summary>
            Gets or sets the UserName of client.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.UserNotificationServerSideMessage.HostName">
            <summary>
            Gets or sets the name of the user's host.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.UserNotificationServerSideMessage.ServerName">
            <summary>
            Gets or sets the name of the server which the user is on.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.UserNotificationServerSideMessage.RealName">
            <summary>
            Gets or sets the real name of the client.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.CannotRemoveServiceBotMessage">
            <summary>
            The ErrorMessage received when a user tries to kill, kick, or deop a bot which provides channel services.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CannotRemoveServiceBotMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.CannotRemoveServiceBotMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CannotRemoveServiceBotMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CannotRemoveServiceBotMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CannotRemoveServiceBotMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.CannotRemoveServiceBotMessage.Nick">
            <summary>
            Gets or sets the nick of the bot
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.CannotRemoveServiceBotMessage.Channel">
            <summary>
            Gets or sets the channel on which the bot resides
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.User">
            <summary>
            Represents a User on an irc server.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.User.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MetaBuilders.Irc.User"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.User.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MetaBuilders.Irc.User"/> class with the given mask string
            </summary>
            <param name="mask">The mask string to parse.</param>
        </member>
        <member name="M:MetaBuilders.Irc.User.ToString">
            <summary>
            Represents this User's information as an irc mask
            </summary>
            <returns></returns>
        </member>
        <member name="M:MetaBuilders.Irc.User.ToNickUserHostString">
            <summary>
            Represents this User's information with a guarenteed nick!user@host format.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.User.IsMatch(MetaBuilders.Irc.User)">
            <summary>
            Determines wether the current user mask matches the given user mask.
            </summary>
            <param name="wildcardMask">The wild-card filled mask to compare with the current.</param>
            <returns>True if this mask is described by the given wildcard Mask. False if not.</returns>
        </member>
        <member name="M:MetaBuilders.Irc.User.IsMatch(System.String,System.String)">
            <summary>
            Decides if the given user address matches the given address mask.
            </summary>
            <param name="actualMask">The user address mask to compare match.</param>
            <param name="wildcardMask">The address mask containing wildcards to match with.</param>
            <returns>True if <parmref>actualMask</parmref> is contained within ( or described with ) the <paramref>wildcardMask</paramref>. False if not.</returns>
        </member>
        <member name="M:MetaBuilders.Irc.User.Parse(System.String)">
            <summary>
            Parses the given string as a mask to populate this user object.
            </summary>
            <param name="rawMask">The mask to parse.</param>
        </member>
        <member name="M:MetaBuilders.Irc.User.Reset">
            <summary>
            Resets the User properties to the default values
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.User.MergeWith(MetaBuilders.Irc.User)">
            <summary>
            Merges the properties of the given User onto this User.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.User.CopyFrom(MetaBuilders.Irc.User)">
            <summary>
            Copies the properties of the given User onto this User.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.User.Nick">
            <summary>
            Gets or sets the nickname of the User
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.User.RealName">
            <summary>
            Gets or sets the supposed real name of the User
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.User.Password">
            <summary>
            Gets or sets the Password the User will use on the server
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.User.UserName">
            <summary>
            Gets or sets the username of the User on her local server.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.User.HostName">
            <summary>
            Gets or sets the hostname of the local machine of this User
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.User.OnlineStatus">
            <summary>
            Gets or sets the online status of this User
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.User.AwayMessage">
            <summary>
            Gets or sets the away message of this User
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.User.ServerName">
            <summary>
            Gets or sets the name of the server which the User is connected to.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.User.IrcOperator">
            <summary>
            Gets or sets if the User is an IRC Operator
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.User.Modes">
            <summary>
            Gets the modes which apply to the user.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.User.PropertyChanged">
            <summary>
            Raised when a property on the instance has changed.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Network.SocketError">
            <summary>
            A partial list of the codes that can exist in the <see cref="P:System.Net.Sockets.SocketException.ErrorCode"/> property.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.InterruptedFunctionCall">
            <summary>
            A blocking operation was interrupted by a call to WSACancelBlockingCall.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.PermissionDenied">
            <summary>
            An attempt was made to access a socket in a way forbidden by its access permissions. 
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.BadAddress">
            <summary>
            The system detected an invalid pointer address in attempting to use a pointer argument of a call.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.InvalidArgument">
            <summary>
            Some invalid argument was supplied (for example, specifying an invalid level to the setsockopt function). 
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.TooManyOpenFiles">
            <summary>
            Too many open sockets. 
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.ResourceTemporarilyUnavailable">
            <summary>
            This error is returned from operations on nonblocking sockets that cannot be completed immediately.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.OperationNowInProgress">
            <summary>
            A blocking operation is currently executing. 
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.OperationAlreadyInProgress">
            <summary>
            An operation was attempted on a nonblocking socket with an operation already in progress
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.SocketOperationOnNonsocket">
            <summary>
            An operation was attempted on something that is not a socket.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.DestinationAddressRequired">
            <summary>
            A required address was omitted from an operation on a socket.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.MessageTooLong">
            <summary>
            A message sent on a datagram socket was larger than the internal message buffer or some other network limit, or the buffer used to receive a datagram was smaller than the datagram itself. 
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.ProtocolWrongTypeForSocket">
            <summary>
            A protocol was specified in the socket function call that does not support the semantics of the socket type requested.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.BadProtocolOption">
            <summary>
            An unknown, invalid or unsupported option or level was specified
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.ProtocolNotSupported">
            <summary>
            The requested protocol has not been configured into the system, or no implementation for it exists.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.SocketTypeNotSupported">
            <summary>
            The support for the specified socket type does not exist in this address family. 
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.OperationNotSupported">
            <summary>
            The attempted operation is not supported for the type of object referenced.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.ProtocolFamilyNotSupported">
            <summary>
            The protocol family has not been configured into the system or no implementation for it exists.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.AddressFamilyNotSupportedByProtocolFamily">
            <summary>
            An address incompatible with the requested protocol was used.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.AddressAlreadyInUse">
            <summary>
            Typically, only one usage of each socket address (protocol/IP address/port) is permitted. This error occurs if an application attempts to bind a socket to an IP address/port that has already been used for an existing socket, or a socket that was not closed properly, or one that is still in the process of closing.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.CannotAssignRequestedAddress">
            <summary>
            The requested address is not valid in its context.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.NetworkIsDown">
            <summary>
            A socket operation encountered a dead network.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.NetworkIsUnreachable">
            <summary>
            A socket operation was attempted to an unreachable network.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.NetworkDroppedConnectionOnReset">
            <summary>
            The connection has been broken due to keep-alive activity detecting a failure while the operation was in progress.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.SoftwareCausedConnectionAbort">
            <summary>
            An established connection was aborted by the software in your host computer, possibly due to a data transmission time-out or protocol error
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.ConnectionResetByPeer">
            <summary>
            An existing connection was forcibly closed by the remote host.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.NoBufferSpaceAvailable">
            <summary>
            An operation on a socket could not be performed because the system lacked sufficient buffer space or because a queue was full. 
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.SocketIsAlreadyConnected">
            <summary>
            A connect request was made on an already-connected socket. 
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.SocketIsNotConnected">
            <summary>
            A request to send or receive data was disallowed because the socket is not connected and no address was supplied.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.CannotSendAfterSocketShutdown">
            <summary>
            A request to send or receive data was disallowed because the socket had already been shut down in that direction with a previous shutdown call.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.ConnectionTimedOut">
            <summary>
            A connection attempt failed because the connected party did not properly respond after a period of time, or the established connection failed because the connected host has failed to respond. 
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.ConnectionRefused">
            <summary>
            No connection could be made because the target computer actively refused it. 
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.HostIsDown">
            <summary>
            A socket operation failed because the destination host is down.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.NoRouteToHost">
            <summary>
            A socket operation was attempted to an unreachable host.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.TooManyProcesses">
            <summary>
            A Windows Sockets implementation may have a limit on the number of applications that can use it simultaneously.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.NetworkSubsystemIsUnavailable">
            <summary>
            This error is returned if the Windows Sockets implementation cannot function at this time because the underlying system it uses to provide network services is currently unavailable. 
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.WinsockDllVersionOutOfRange">
            <summary>
            The current Windows Sockets implementation does not support the Windows Sockets specification version requested by the application.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.SuccessfulWSAStartupNotYetPerformed">
            <summary>
            Successful WSAStartup not yet performed. 
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.GracefulShutdownInProgress">
            <summary>
            Returned to indicate that the remote party has initiated a graceful shutdown sequence. 
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.ClassTypeNotFound">
            <summary>
            The specified class was not found. 
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.HostNotFound">
            <summary>
            No such host is known. The name is not an official host name or alias, or it cannot be found in the database(s) being queried.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.NonauthoritativeHostNotFound">
            <summary>
            This is usually a temporary error during host name resolution and means that the local server did not receive a response from an authoritative server. A retry at some time later may be successful. 
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.ThisIsANonrecoverableError">
            <summary>
            This indicates some sort of nonrecoverable error occurred during a database lookup.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.SocketError.NoDataRecordOfRequestedType">
            <summary>
            The requested name is valid and was found in the database, but it does not have the correct associated data being resolved for.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.ChannelCollection">
            <summary>
            A collection that stores <see cref="T:MetaBuilders.Irc.Channel"/> objects.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.ChannelCollection.FindChannel(System.String)">
            <summary>
            Finds the <see href="Channel" /> in the collection with the given name.
            </summary>
            <returns>The so-named channel, or null.</returns>
        </member>
        <member name="M:MetaBuilders.Irc.ChannelCollection.EnsureChannel(System.String,MetaBuilders.Irc.Client)">
            <summary>
            Either finds or creates the channel by the given name
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.UserModeCollection">
            <summary>
                <para>
                  A collection that stores <see cref="T:MetaBuilders.Irc.Messages.Modes.UserMode"/> objects.
               </para>
            </summary>
            <seealso cref="T:MetaBuilders.Irc.Messages.Modes.UserModeCollection"/>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.ReceiveNickChangesMode">
            <summary>
            This mode signifies that the user will receive client nick changes messages.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ReceiveNickChangesMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.ReceiveNickChangesMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ReceiveNickChangesMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.ReceiveNickChangesMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.ReceiveNickChangesMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WallopsMessage">
            <summary>
            This message is sent to all users with <see cref="T:MetaBuilders.Irc.Messages.Modes.ReceiveWallopsMode"/>,
            <see cref="T:MetaBuilders.Irc.Messages.Modes.NetworkOperatorMode"/>, or <see cref="T:MetaBuilders.Irc.Messages.Modes.ServerOperatorMode"/> user modes.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WallopsMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WallopsMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WallopsMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WallopsMessage.Text">
            <summary>
            Gets or sets the text of the <see cref="T:MetaBuilders.Irc.Messages.WallopsMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WallopsMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WhoIsUserReplyMessage">
            <summary>
            A reply to a <see cref="T:MetaBuilders.Irc.Messages.WhoIsMessage"/> that contains 
            basic information about the user in question.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsUserReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.WhoIsUserReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsUserReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsUserReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsUserReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoIsUserReplyMessage.User">
            <summary>
            Gets the information about the user in question.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.NotRegisteredMessage">
            <summary>
            Returned by the server to indicate that the client must be registered before the server will allow it to be parsed in detail.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NotRegisteredMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.NotRegisteredMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NotRegisteredMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NotRegisteredMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.NoSuchChannelMessage">
            <summary>
            Used to indicate the given channel name is invalid.
            </summary>
            <remarks>
            :irc.easynews.com 403 NeboBot #qwe9r8wjfq98wer :No such channel
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoSuchChannelMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.NoSuchChannelMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoSuchChannelMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoSuchChannelMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoSuchChannelMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoSuchChannelMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.NoSuchChannelMessage.Channel">
            <summary>
            Gets or sets the Channel which was empty or didn't exist.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ModeAction">
            <summary>
            Possible actions for each mode change in a <see cref="T:MetaBuilders.Irc.Messages.ChannelModeMessage"/> or <see cref="T:MetaBuilders.Irc.Messages.UserModeMessage"/> message.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Messages.ModeAction.Add">
            <summary>
            Gets the <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/> representing the addition of a mode to a user or channel.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Messages.ModeAction.Remove">
            <summary>
            Gets the <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/> representing the removal of a mode from a user or channel.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ModeAction.IsDefined(System.String)">
            <summary>
            Determines if the given string value is representative of any defined ModeActions.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ModeAction.Parse(System.String)">
            <summary>
            Returns the correct <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/> for the given string value.
            </summary>
            <param name="value">The String to parse.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ModeAction.Parse(System.String,System.Boolean)">
            <summary>
            Returns the correct <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/> for the given string value.
            </summary>
            <param name="value">The String to parse.</param>
            <param name="ignoreCase">Decides whether the parsing is case-specific.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ModeAction.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/> class.
            </summary>
            <remarks>
            This is private so that only the Enum-like static references can ever be used.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ModeAction.ToString">
            <summary>
            Gets a string representing the <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/> in irc format.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ModeAction.Equals(System.Object)">
            <summary>
            Implements Equals based on a string value.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ModeAction.GetHashCode">
            <summary>
            Implements Equals based on a string value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ModeAction.op_Equality(MetaBuilders.Irc.Messages.ModeAction,MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Implements the operator based on a string value.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ModeAction.op_Inequality(MetaBuilders.Irc.Messages.ModeAction,MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Implements the operator based on a string value.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ModeAction.op_LessThan(MetaBuilders.Irc.Messages.ModeAction,MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Implements the operator based on a string value.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ModeAction.op_GreaterThan(MetaBuilders.Irc.Messages.ModeAction,MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Implements the operator based on a string value.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ModeAction.CompareTo(System.Object)">
            <summary>
            Implements <see cref="M:System.IComparable.CompareTo(System.Object)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ModeAction.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements ISerializable.GetObjectData
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ModeAction.Values">
            <summary>
            Gets an array of <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/> instances representing all the possible actions.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WatchStatusRequestMessage">
            <summary>
            A Message that requests the status of the users on your watch list.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchStatusRequestMessage.CanParse(System.String)">
            <summary>
            Determines if the message can be parsed by this type.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchStatusRequestMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchStatusRequestMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WhisperMessage">
            <summary>
            With the WhisperMessage, clients can send messages to people within the context of a channel.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhisperMessage.#ctor">
            <summary>
            Creates a new instance of the WhisperMessage class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhisperMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhisperMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhisperMessage.Validate(MetaBuilders.Irc.ServerSupport)">
            <summary>
            Validates this message's properties according to the given <see cref="T:MetaBuilders.Irc.ServerSupport"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhisperMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhisperMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhisperMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhisperMessage.Channel">
            <summary>
            Gets or sets the channel being targeted.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhisperMessage.Targets">
            <summary>
            Gets the target of this <see cref="T:MetaBuilders.Irc.Messages.TextMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhisperMessage.Text">
            <summary>
            Gets or sets the actual text of this <see cref="T:MetaBuilders.Irc.Messages.TextMessage"/>.
            </summary>
            <remarks>
            This property holds the core purpose of irc itself... sending text communication to others.
            </remarks>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.InvalidMessageException">
            <summary>
            Exception thrown when a message parsed from a string is invalid.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.InvalidMessageException.#ctor">
            <summary>
            Initializes a new instance of the InvalidMessageException class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.InvalidMessageException.#ctor(System.String)">
            <summary>
            Intializes a new instance of the InvalidMessageException class with the given message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.InvalidMessageException.#ctor(System.String,System.Exception)">
            <summary>
            Intializes a new instance of the InvalidMessageException class with the given message and inner exception.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.InvalidMessageException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the InvalidMessageException class with the given Message and RecivedMessage.
            </summary>
            <param name="message">Message explaining the exception.</param>
            <param name="receivedMessage">The Message received which was invalid.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.InvalidMessageException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the InvalidMessageException class with the given Message and RecivedMessage.
            </summary>
            <param name="message">Message explaining the exception.</param>
            <param name="receivedMessage">The Message received which was invalid.</param>
            <param name="innerException">The exception that exists as the child exception to this one.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.InvalidMessageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            deserialization constructor
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.InvalidMessageException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.InvalidMessageException.ReceivedMessage">
            <summary>
            Gets the message string that caused the exception.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.InvalidMessageException.Message">
            <summary>
            Gets the string content of the invalid message.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.InviteOnlyMode">
            <summary>
            When thi mode is set, 
            new members are only accepted if their mask matches Invite-list (See <see cref="T:MetaBuilders.Irc.Messages.Modes.InvitationExceptionMode"/>) 
            or they have been invited by a channel operator.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.InviteOnlyMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.InviteOnlyMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.InviteOnlyMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.InviteOnlyMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.InviteOnlyMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.ClientCollection">
            <summary>
                <para>
                  A collection that stores <see cref="T:MetaBuilders.Irc.Client"/> objects.
               </para>
            </summary>
            <seealso cref="T:MetaBuilders.Irc.ClientCollection"/>
        </member>
        <member name="T:MetaBuilders.Irc.MessageCollection">
            <summary>
                <para>
                  A collection that stores <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> objects.
               </para>
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.JournalEntry">
            <summary>
            A single entry in the journal of messages and related information related to an irc channel or query.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.JournalEntry.#ctor">
            <summary>
            Creates a new instance of the <see href="JournalEntry" /> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.JournalEntry.#ctor(System.Object)">
            <summary>
            Creates a new instance of the <see href="JournalEntry"/> class, populated with the given item.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.JournalEntry.Time">
            <summary>
            The time at which the entry was added to the journal.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.JournalEntry.Item">
            <summary>
            The entry data, usually an IrcMessage, but can be any object.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.JournalEntry.PropertyChanged">
            <summary>
            Raised when a property on the instance has changed.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.BanListFullMessage">
            <summary>
            The ErrorMessage received when a user tries to perform a channel-specific operation on a user, 
            and the user isn't in the channel.
            </summary>
            <remarks>
            Although all networks have a limit on the total number of bans allowed, 
            not all networks will tell you when the list is full. 
            (they will simply ignore extra bans.) 
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.BanListFullMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.BanListFullMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.BanListFullMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.BanListFullMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.BanListFullMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.BanListFullMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.BanListFullMessage.BanMask">
            <summary>
            Gets or sets the mask of the user being banned
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.BanListFullMessage.Channel">
            <summary>
            Gets or sets the channel being targeted
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.MonitoredUserOfflineMessage">
            <summary>
            A Monitor system notification that a monitored user is online
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.MonitoredNicksListMessage">
            <summary>
            A Monitor system notification that contains a list of nicks
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitoredNicksListMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitoredNicksListMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.MonitoredNicksListMessage.Nicks">
            <summary>
            Gets the collection of nicks of users for the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitoredUserOfflineMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.MonitoredUserOfflineMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitoredUserOfflineMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.UnknownConnectionsMessage">
            <summary>
            This message indicates the number of unknown connections on the server.
            </summary>
            <remarks>
            This is most likely the number of clients who are starting to connect 
            but not yet registered with the server. (fully connected) 
            Unsure if this is server only or network wide. 
            Note that if there are no unknown connections, this will not be sent. 
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UnknownConnectionsMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.UnknownConnectionsMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UnknownConnectionsMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UnknownConnectionsMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UnknownConnectionsMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.UnknownConnectionsMessage.UnknownConnectionCount">
            <summary>
            Gets or sets the number of unknown connections
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.MonitorListRequestMessage">
            <summary>
            A Monitor system message that requests the list of nicks currently being monitored.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitorListRequestMessage.CanParse(System.String)">
            <summary>
            Determines if the message can be parsed by this type.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitorListRequestMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitorListRequestMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.MonitorStatusRequestMessage">
            <summary>
            A Monitor system message that requests that status of the users on your monitor list.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitorStatusRequestMessage.CanParse(System.String)">
            <summary>
            Determines if the message can be parsed by this type.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitorStatusRequestMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitorStatusRequestMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.SlotsRequestMessage">
            <summary>
            An SPR Jukebox message that notifies the recipient of the senders available mp3 serving capabilities.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SlotsRequestMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.SlotsRequestMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SlotsRequestMessage.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ActionRequestMessage"/> class with the given text and target.
            </summary>
            <param name="target">The target of the action.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SlotsRequestMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SlotsRequestMessage.Parse(System.String)">
            <summary>
            Parses the given string to populate this <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.SlotsRequestMessage.TotalSendSlots">
            <summary>
            TotalSendSlots
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.SlotsRequestMessage.AvailableSendSlots">
            <summary>
            AvailableSendSlots
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.SlotsRequestMessage.NextSend">
            <summary>
            NextSend
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.SlotsRequestMessage.TakenQueueSlots">
            <summary>
            TakenQueueSlots
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.SlotsRequestMessage.TotalQueueSlots">
            <summary>
            TotalQueueSlots
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.SlotsRequestMessage.CpsRecord">
            <summary>
            CpsRecord
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.SlotsRequestMessage.TotalFiles">
            <summary>
            TotalFiles
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.SlotsRequestMessage.ExtendedData">
            <summary>
            Gets the data payload of the Ctcp request.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WhoMessage">
            <summary>
            Requests information about the given user or users.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoMessage.Mask">
            <summary>
            Gets or sets the mask which is matched for users to return information about.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoMessage.RestrictToOps">
            <summary>
            Gets or sets if the results should only contain irc operators.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.ReceiveServerKillsMode">
            <summary>
            This mode signifies that the user will receive wallop messages.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ReceiveServerKillsMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.ReceiveServerKillsMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ReceiveServerKillsMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.ReceiveServerKillsMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.ReceiveServerKillsMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.ReceiveDebugMode">
            <summary>
            This mode signifies that the user will receive debug messages.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ReceiveDebugMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.ReceiveDebugMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ReceiveDebugMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.ReceiveDebugMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.ReceiveDebugMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WhoIsEndReplyMessage">
            <summary>
            Signals the end of a <see cref="T:MetaBuilders.Irc.Messages.WhoIsMessage"/> reply.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsEndReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.WhoIsEndReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsEndReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsEndReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsEndReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoIsEndReplyMessage.Nick">
            <summary>
            Gets or sets the nick for the user examined.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.LusersChannelsReplyMessage">
            <summary>
            One of the responses to the <see cref="T:MetaBuilders.Irc.Messages.LusersMessage"/> query.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LusersChannelsReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.LusersChannelsReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LusersChannelsReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LusersChannelsReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LusersChannelsReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.LusersChannelsReplyMessage.ChannelCount">
            <summary>
            Gets or sets the number of channels available.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WasNoSuchNickMessage">
            <summary>
            Returned from the server in response to a WhoWasMessage to indicate there is no history information for that nick.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WasNoSuchNickMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.WasNoSuchNickMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WasNoSuchNickMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WasNoSuchNickMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameter portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WasNoSuchNickMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WasNoSuchNickMessage.Nick">
            <summary>
            The nick which had no information
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.NoSuchServerMessage">
            <summary>
            Used to indicate the server name given currently doesn't exist.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoSuchServerMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.NoSuchServerMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoSuchServerMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoSuchServerMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoSuchServerMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.NoSuchServerMessage.Nick">
            <summary>
            Gets or sets the nick which wasn't accepted.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.BansReplyMessage">
            <summary>
            Contains a Channel and BanId as one of possible many replies to a ban list request.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.BansReplyMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.BansReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.BansReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.BansReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.BansReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.BansReplyMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.BansReplyMessage.Channel">
            <summary>
            Gets or sets the channel the ban list refers to.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.BansReplyMessage.BanId">
            <summary>
            Gets or sets the ban referenced.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ChannelPropertyMessage">
            <summary>
            With the ChannelPropertyMessage, clients can read and write property values for IrcX enabled channels.
            </summary>
            <remarks>
            <p>
            To read all channel proprties for a channel, simply set the <see cref="P:MetaBuilders.Irc.Messages.ChannelPropertyMessage.Channel"/> property.
            To read a channel property, set  <see cref="P:MetaBuilders.Irc.Messages.ChannelPropertyMessage.Channel"/> and <see cref="P:MetaBuilders.Irc.Messages.ChannelPropertyMessage.Prop"/>.
            To write a channel property, set the <see cref="P:MetaBuilders.Irc.Messages.ChannelPropertyMessage.Channel"/>, <see cref="P:MetaBuilders.Irc.Messages.ChannelPropertyMessage.Prop"/>, and <see cref="P:MetaBuilders.Irc.Messages.ChannelPropertyMessage.NewValue"/> properties. When a server sets the property, the client will receive the same property message back.
            </p>
            <p>This command is only effective for an IrcX enabled server.</p>
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelPropertyMessage.#ctor">
            <summary>
            Creates a new instance of the ChannelPropertyMessage class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelPropertyMessage.Validate(MetaBuilders.Irc.ServerSupport)">
            <summary>
            Validates this message against the given server support
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelPropertyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelPropertyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelPropertyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelPropertyMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelPropertyMessage.Channel">
            <summary>
            Gets or sets the channel being targeted.
            </summary>
            <remarks>
            Some implementations allow for this to be the name of a server, but this is an extension.
            </remarks>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelPropertyMessage.Prop">
            <summary>
            Gets or sets the channel property being targeted.
            </summary>
            <remarks>
            When this message is sent with an empty <see cref="P:MetaBuilders.Irc.Messages.ChannelPropertyMessage.Prop"/>, the values of all current channel properties are sent from the server.
            </remarks>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelPropertyMessage.NewValue">
            <summary>
            Gets or sets the value being applied to the target channel property.
            </summary>
            <remarks>
            You can set the value of a channel property by specify its name in the <see cref="P:MetaBuilders.Irc.Messages.ChannelPropertyMessage.Prop"/> property, and the value in the <see cref="P:MetaBuilders.Irc.Messages.ChannelPropertyMessage.NewValue"/> property.
            </remarks>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.VersionReplyMessage">
            <summary>
            The reply to a <see cref="T:MetaBuilders.Irc.Messages.VersionRequestMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.VersionReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.VersionReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.VersionReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.VersionReplyMessage.Parse(System.String)">
            <summary>
            Parses the given string to populate this <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.VersionReplyMessage.Response">
            <summary>
            Gets or sets the version of the client.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.VersionReplyMessage.ExtendedData">
            <summary>
            Gets the data payload of the Ctcp request.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.SoundRequestMessage">
            <summary>
            A request that a client plays a local sound.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SoundRequestMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.SoundRequestMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SoundRequestMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SoundRequestMessage.Parse(System.String)">
            <summary>
            Parses the given string to populate this <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.SoundRequestMessage.Text">
            <summary>
            Gets or sets an optional additional test message going along with the request.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.SoundRequestMessage.SoundFile">
            <summary>
            Gets or sets the name of the requested sound file to be played.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.SoundRequestMessage.ExtendedData">
            <summary>
            Gets the data payload of the Ctcp request.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ScriptReplyMessage">
            <summary>
            The reply to a <see cref="T:MetaBuilders.Irc.Messages.ScriptRequestMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ScriptReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ScriptReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ScriptReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ScriptReplyMessage.Parse(System.String)">
            <summary>
            Parses the given string to populate this <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ScriptReplyMessage.Response">
            <summary>
            Gets or sets the script name that the client is using
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ScriptReplyMessage.ExtendedData">
            <summary>
            Gets the data payload of the Ctcp request.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.PingReplyMessage">
            <summary>
            The response to a <see cref="T:MetaBuilders.Irc.Messages.PingRequestMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.PingReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.PingReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.PingReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.PingReplyMessage.Parse(System.String)">
            <summary>
            Parses the given string to populate this <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.PingReplyMessage.TimeStamp">
            <summary>
            The timestamp of the ping reply.
            </summary>
            <remarks>
            When receiving a <see cref="T:MetaBuilders.Irc.Messages.PingRequestMessage"/>, this reply should send the same exact timestamp that the request had.
            This allows the requestor to substract the two to calculate the timespan to whatever degree
            of exactness that they want.
            </remarks>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.PingReplyMessage.ExtendedData">
            <summary>
            Gets the data payload of the Ctcp request.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.GenericCtcpRequestMessage">
            <summary>
            An unknown <see cref="T:MetaBuilders.Irc.Messages.CtcpRequestMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.GenericCtcpRequestMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.GenericCtcpRequestMessage.Parse(System.String)">
            <summary>
            Parses the given string to populate this <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.GenericCtcpRequestMessage.DataPackage">
            <summary>
            Gets or sets the information packaged with the ctcp command.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.GenericCtcpRequestMessage.ExtendedData">
            <summary>
            Gets the data payload of the Ctcp request.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.GenericCtcpRequestMessage.Command">
            <summary>
            Gets or sets the Ctcp command.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.FingerRequestMessage">
            <summary>
            Requests the target's name and idle time.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.FingerRequestMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.FingerRequestMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.FingerRequestMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.CtcpUtil">
            <summary>
            Utility class for Ctcp messages.
            </summary>
            <remarks>
            This most likely doesn't need to be used from lib-user code.
            </remarks>
        </member>
        <member name="F:MetaBuilders.Irc.Messages.CtcpUtil.ExtendedDataMarker">
            <summary>
            The character used to indicate the start and end of an extended data section in a CTCP message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CtcpUtil.Escape(System.String)">
            <summary>
            Escapes the given text for use in a ctcp message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CtcpUtil.Unescape(System.String)">
            <summary>
            Unescapes the given text for use outside a ctcp message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CtcpUtil.GetTransportCommand(System.String)">
            <summary>
            Extracts the TransportCommand from the given message string.
            </summary>
            <remarks>
            A Ctcp TransportCommand is the irc command used to send the message to another user,
            and is not to be confused with the Ctcp Command.
            It is always either PRIVMSG or NOTICE for a valid ctcp command.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CtcpUtil.GetInternalCommand(System.String)">
            <summary>
            Extracts the actual Ctcp command from the given message string.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CtcpUtil.GetExtendedData(System.String)">
            <summary>
            Extracts the extended data section of a Ctcp message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CtcpUtil.IsCtcpMessage(System.String)">
            <summary>
            Determines if the given message is a Ctcp message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CtcpUtil.IsRequestMessage(System.String)">
            <summary>
            Determines if the given ctcp message is a request message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CtcpUtil.IsReplyMessage(System.String)">
            <summary>
            Determines if the given ctcp message is a reply message.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ClientInfoRequestMessage">
            <summary>
            This message is a request that the target of the message reply with a human-readable
            list stating what Ctcp commands they support.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ClientInfoRequestMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ClientInfoRequestMessage"/> class
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ClientInfoRequestMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ClientInfoRequestMessage.Parse(System.String)">
            <summary>
            Parses the given string to populate this <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ClientInfoRequestMessage.Parameters">
            <summary>
            Gets the list of parameters which signify interest in a specific command or subcommand.
            </summary>
            <remarks>
            To specificly ask about support for the "TIME" command, add "TIME" as the first parameter.
            </remarks>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ClientInfoRequestMessage.ExtendedData">
            <summary>
            Gets the data payload of the Ctcp request.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.TopicGuardedMode">
            <summary>
            This mode is used to restrict the usage of the <see cref="T:MetaBuilders.Irc.Messages.TopicMessage"/> to channel operators.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.TopicGuardedMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.TopicGuardedMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.TopicGuardedMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.TopicGuardedMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.TopicGuardedMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.AccessControlMode">
            <summary>
            This category of modes is used to control access to a channel.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.AccessControlMode.AddParameter(MetaBuilders.Irc.Messages.ChannelModeMessage)">
            <summary>
            Applies this mode to the ModeArguments property of the given <see cref="T:MetaBuilders.Irc.Messages.ChannelModeMessage"/>.
            </summary>
            <param name="msg">The message which will be modified to include this mode.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.AccessControlMode.ToString">
            <summary>
            A string representation of the mode.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.AccessControlMode.Mask">
            <summary>
            Gets or sets the mask applied to this mode.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.MessageConduit">
            <summary>
            The base class for classes which send and receive messages.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnGenericMessage(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.GenericMessage})">
            <summary>Raises the GenericMessage event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnGenericErrorMessage(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.GenericErrorMessage})">
            <summary>Raises the GenericErrorMessage event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnErroneousNick(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.ErroneousNickMessage})">
            <summary>Raises the ErroneusNick event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnNickCollision(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.NickCollisionMessage})">
            <summary>Raises the NickCollision event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnNickInUse(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.NickInUseMessage})">
            <summary>Raises the NickCollision event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnNoHostPermission(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.NoHostPermissionMessage})">
            <summary>Raises the NoHostPermission event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnNoNickGiven(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.NoNickGivenMessage})">
            <summary>Raises the NoNickGiven event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnNotRegistered(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.NotRegisteredMessage})">
            <summary>Raises the NotRegistered event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnYouAreBanned(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.YouAreBannedMessage})">
            <summary>Raises the YouAreBanned event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnNoSuchChannel(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.NoSuchChannelMessage})">
            <summary>Raises the NoSuchChannel event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnNoSuchNick(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.NoSuchNickMessage})">
            <summary>Raises the NoSuchNick event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnNoSuchServer(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.NoSuchServerMessage})">
            <summary>Raises the NoSuchServer event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnCannotSendToChannel(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.CannotSendToChannelMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.CannotSendToChannel"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnTooManyChannels(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.TooManyChannelsMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.TooManyChannels"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnTooManyTargets(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.TooManyTargetsMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.TooManyTargets"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnWasNoSuchNick(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.WasNoSuchNickMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.WasNoSuchNick"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnCannotUseColors(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.CannotUseColorsMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.CannotUseColors"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnNoPingOriginSpecified(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.NoPingOriginSpecifiedMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.NoPingOriginSpecified"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnNoRecipientGiven(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.NoRecipientGivenMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.NoRecipientGiven"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnNoTextToSend(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.NoTextToSendMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.NoTextToSend"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnTooManyLines(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.TooManyLinesMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.NoTextToSend"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnUnknownCommand(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.UnknownCommandMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.UnknownCommand"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnCannotChangeNickWhileBanned(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.CannotChangeNickWhileBannedMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.CannotChangeNickWhileBanned"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnNickChangeTooFast(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.NickChangeTooFastMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.NickChangeTooFast"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnTargetChangeTooFast(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.TargetChangeTooFastMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.TargetChangeTooFast"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnNotOnChannel(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.NotOnChannelMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.NotOnChannel"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnAlreadyOnChannel(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.AlreadyOnChannelMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.AlreadyOnChannel"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnIdentChanged(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.IdentChangedMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.IdentChanged"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnNotEnoughParameters(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.NotEnoughParametersMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.NotEnoughParameters"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnChannelKeyAlreadySet(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.ChannelKeyAlreadySetMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.ChannelKeyAlreadySet"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnChannelLimitReached(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.ChannelLimitReachedMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.ChannelLimitReached"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnUnknownChannelMode(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.UnknownChannelModeMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.UnknownChannelMode"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnChannelIsInviteOnly(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.ChannelIsInviteOnlyMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.ChannelIsInviteOnly"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnYouAreBannedFromChannel(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.YouAreBannedFromChannelMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.YouAreBannedFromChannel"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnChannelRequiresKey(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.ChannelRequiresKeyMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.ChannelRequiresKey"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnChannelRequiresRegisteredNick(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.ChannelRequiresRegisteredNickMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.ChannelRequiresRegisteredNick"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnBanListFull(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.BanListFullMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.BanListFull"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnChannelOperatorStatusRequired(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.ChannelOperatorStatusRequiredMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.ChannelOperatorStatusRequired"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnCannotRemoveServiceBot(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.CannotRemoveServiceBotMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.CannotRemoveServiceBot"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnChannelBlocked(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.ChannelBlockedMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.ChannelBlocked"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnUnknownUserMode(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.UnknownUserModeMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.UnknownUserMode"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnSilenceListFull(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.SilenceListFullMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.SilenceListFull"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnAcceptListFull(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.AcceptListFullMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.AcceptListFull"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnAcceptAlreadyExists(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.AcceptAlreadyExistsMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.AcceptAlreadyExists"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnAcceptDoesNotExist(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.AcceptDoesNotExistMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.AcceptDoesNotExist"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnPing(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.PingMessage})">
            <summary>Raises the Ping event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnPong(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.PongMessage})">
            <summary>Raises the Pong event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnChat(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.TextMessage})">
            <summary>Raises the Chat event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnNotice(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.TextMessage})">
            <summary>Raises the Notice event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnNickChange(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.NickChangeMessage})">
            <summary>Raises the NickChange event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnJoin(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.JoinMessage})">
            <summary>Raises the Join event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnPart(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.PartMessage})">
            <summary>Raises the Part event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnQuit(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.QuitMessage})">
            <summary>Raises the Quit event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnKick(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.KickMessage})">
            <summary>Raises the Kick event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnTopic(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.TopicMessage})">
            <summary>Raises the Topic event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnTopicReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.TopicReplyMessage})">
            <summary>Raises the TopicReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnTopicNoneReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.TopicNoneReplyMessage})">
            <summary>Raises the TopicNoneReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnInvite(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.InviteMessage})">
            <summary>Raises the Invite event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnAway(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.AwayMessage})">
            <summary>Raises the Away event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnAdmin(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.AdminMessage})">
            <summary>Raises the Admin event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnBack(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.BackMessage})">
            <summary>Raises the Back event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnGenericNumericMessage(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.GenericNumericMessage})">
            <summary>Raises the GenericNumericMessage event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnInfo(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.InfoMessage})">
            <summary>Raises the Info event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnIsOn(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.IsOnMessage})">
            <summary>Raises the IsOn event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnIsOnReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.IsOnReplyMessage})">
            <summary>Raises the IsOnReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnKill(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.KillMessage})">
            <summary>Raises the Kill event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnLinks(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.LinksMessage})">
            <summary>Raises the Links event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnLinksReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.LinksReplyMessage})">
            <summary>Raises the LinksReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnLinksEndReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.LinksEndReplyMessage})">
            <summary>Raises the LinksEndReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnList(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.ListMessage})">
            <summary>Raises the List event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnListStartReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.ListStartReplyMessage})">
            <summary>Raises the ListStartReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnListReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.ListReplyMessage})">
            <summary>Raises the ListReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnListEndReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.ListEndReplyMessage})">
            <summary>Raises the ListEndReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnLusers(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.LusersMessage})">
            <summary>Raises the Lusers event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnLusersReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.LusersReplyMessage})">
            <summary>Raises the LusersReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnLusersOpReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.LusersOpReplyMessage})">
            <summary>Raises the LusersOpReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnLusersMeReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.LusersMeReplyMessage})">
            <summary>Raises the LusersMeReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnLusersChannelsReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.LusersChannelsReplyMessage})">
            <summary>Raises the LusersChannelsReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnMotd(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.MotdMessage})">
            <summary>Raises the Motd event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnMotdStartReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.MotdStartReplyMessage})">
            <summary>Raises the MotdStartReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnMotdReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.MotdReplyMessage})">
            <summary>Raises the MotdReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnMotdEndReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.MotdEndReplyMessage})">
            <summary>Raises the MotdEndReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnNames(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.NamesMessage})">
            <summary>Raises the Names event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnNamesReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.NamesReplyMessage})">
            <summary>Raises the NamesReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnNamesEndReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.NamesEndReplyMessage})">
            <summary>Raises the NamesEndReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnOper(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.OperMessage})">
            <summary>Raises the Oper event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnOperReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.OperReplyMessage})">
            <summary>Raises the OperReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnPassword(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.PasswordMessage})">
            <summary>Raises the Password event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnSelfAway(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.SelfAwayMessage})">
            <summary>Raises the SelfAway event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnSelfUnAway(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.SelfUnAwayMessage})">
            <summary>Raises the SelfUnAway event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnStats(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.StatsMessage})">
            <summary>Raises the Stats event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnStatsReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.StatsReplyMessage})">
            <summary>Raises the StatsReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnTime(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.TimeMessage})">
            <summary>Raises the Time event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnServerTimeReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.ServerTimeReplyMessage})">
            <summary>Raises the ServerTimeReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnTrace(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.TraceMessage})">
            <summary>Raises the Trace event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnUserNotification(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.UserNotificationMessage})">
            <summary>Raises the UserNotification event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnUserNotificationServerSide(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.UserNotificationServerSideMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.UserNotificationServerSide"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnUserAway(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.UserAwayMessage})">
            <summary>Raises the UserAway event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnVersion(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.VersionMessage})">
            <summary>Raises the Version event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnWallops(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.WallopsMessage})">
            <summary>Raises the Wallops event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnWallchops(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.WallchopsMessage})">
            <summary>Raises the Wallchops event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnWho(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.WhoMessage})">
            <summary>Raises the Who event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnWhoReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.WhoReplyMessage})">
            <summary>Raises the WhoReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnWhoEndReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.WhoEndReplyMessage})">
            <summary>Raises the WhoEndReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnWhoIs(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.WhoIsMessage})">
            <summary>Raises the WhoIs event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnWhoIsChannelsReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.WhoIsChannelsReplyMessage})">
            <summary>Raises the WhoIsChannelsReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnWhoIsIdleReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.WhoIsIdleReplyMessage})">
            <summary>Raises the WhoIsIdleReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnWhoIsOperReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.WhoIsOperReplyMessage})">
            <summary>Raises the WhoIsOperReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnWhoIsServerReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.WhoIsServerReplyMessage})">
            <summary>Raises the WhoIsServerReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnWhoIsUserReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.WhoIsUserReplyMessage})">
            <summary>Raises the WhoIsUserReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnWhoIsEndReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.WhoIsEndReplyMessage})">
            <summary>Raises the WhoIsEndReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnWhoIsRegisteredNickReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.WhoIsRegisteredNickReplyMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.WhoIsRegisteredNickReply"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnWhoWas(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.WhoWasMessage})">
            <summary>Raises the WhoWas event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnWhoWasUserReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.WhoWasUserReplyMessage})">
            <summary>Raises the WhoWasUserReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnWhoWasEndReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.WhoWasEndReplyMessage})">
            <summary>Raises the WhoWasEndReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnUserHost(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.UserHostMessage})">
            <summary>Raises the UserHost event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnUserHostReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.UserHostReplyMessage})">
            <summary>Raises the UserHostReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnSilence(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.SilenceMessage})">
            <summary>Raises the Silence event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnSilenceReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.SilenceReplyMessage})">
            <summary>Raises the SilenceReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnSilenceEndReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.SilenceEndReplyMessage})">
            <summary>Raises the SilenceEndReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnAcceptListEditor(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.AcceptListEditorMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.AcceptListEditor"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnAcceptListRequest(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.AcceptListRequestMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.AcceptListRequest"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnAcceptListReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.AcceptListReplyMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.AcceptListReply"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnAcceptListEndReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.AcceptListEndReplyMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.AcceptListEndReply"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnActionRequest(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.ActionRequestMessage})">
            <summary>Raises the ActionRequest event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnGenericCtcpRequest(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.GenericCtcpRequestMessage})">
            <summary>Raises the GenericCtcpReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnGenericCtcpReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.GenericCtcpReplyMessage})">
            <summary>Raises the GenericCtcpRequest event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnClientInfoRequest(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.ClientInfoRequestMessage})">
            <summary>Raises the ClientInfoRequest event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnClientInfoReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.ClientInfoReplyMessage})">
            <summary>Raises the ClientInfoReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnFingerRequest(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.FingerRequestMessage})">
            <summary>Raises the FingerRequest event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnFingerReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.FingerReplyMessage})">
            <summary>Raises the FingerReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnPageRequest(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.PageRequestMessage})">
            <summary>Raises the PageRequest event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnScriptRequest(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.ScriptRequestMessage})">
            <summary>Raises the ScriptRequest event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnScriptReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.ScriptReplyMessage})">
            <summary>Raises the ScriptReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnPingRequest(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.PingRequestMessage})">
            <summary>Raises the PingRequest event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnPingReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.PingReplyMessage})">
            <summary>Raises the PingReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnTimeRequest(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.TimeRequestMessage})">
            <summary>Raises the TimeRequest event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnTimeReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.TimeReplyMessage})">
            <summary>Raises the TimeReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnVersionRequest(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.VersionRequestMessage})">
            <summary>Raises the VersionRequest event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnVersionReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.VersionReplyMessage})">
            <summary>Raises the VersionReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnUserInfoRequest(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.UserInfoRequestMessage})">
            <summary>Raises the UserInfoRequest event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnUserInfoReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.UserInfoReplyMessage})">
            <summary>Raises the UserInfoReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnSourceRequest(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.SourceRequestMessage})">
            <summary>Raises the SourceRequest event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnSourceReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.SourceReplyMessage})">
            <summary>Raises the SourceReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnSoundRequest(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.SoundRequestMessage})">
            <summary>Raises the SoundRequest event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnErrorReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.ErrorReplyMessage})">
            <summary>Raises the ErrorReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnErrorRequest(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.ErrorRequestMessage})">
            <summary>Raises the ErrorRequest event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnMp3Request(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.Mp3RequestMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.Mp3Request"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnSlotsRequest(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.SlotsRequestMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.SlotsRequest"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnDccChatRequest(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.DccChatRequestMessage})">
            <summary>Raises the DccChatRequest event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnDccSendRequest(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.DccSendRequestMessage})">
            <summary>Raises the DccSendRequest event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnDccGetRequest(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.DccGetRequestMessage})">
            <summary>Raises the DccGetRequest event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnDccResumeRequest(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.DccResumeRequestMessage})">
            <summary>Raises the DccResumeRequest event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnDccAcceptRequest(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.DccAcceptRequestMessage})">
            <summary>Raises the DccAcceptRequest event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnUserMode(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.UserModeMessage})">
            <summary>Raises the UserMode event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnChannelMode(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.ChannelModeMessage})">
            <summary>Raises the ChannelMode event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnChannelModeIsReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.ChannelModeIsReplyMessage})">
            <summary>Raises the ChannelModeIsReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnUserModeIsReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.UserModeIsReplyMessage})">
            <summary>Raises the ChannelModeIsReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnBansReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.BansReplyMessage})">
            <summary>Raises the BansReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnBansEndReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.BansEndReplyMessage})">
            <summary>Raises the BansEndReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnWelcome(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.WelcomeMessage})">
            <summary>Raises the Welcome event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnYourHost(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.YourHostMessage})">
            <summary>Raises the YourHost event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnServerCreated(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.ServerCreatedMessage})">
            <summary>Raises the ServerCreated event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnServerInfo(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.ServerInfoMessage})">
            <summary>Raises the ServerInfo event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnSupport(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.SupportMessage})">
            <summary>Raises the Support event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnUnknownConnections(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.UnknownConnectionsMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.UnknownConnections"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnUniqueId(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.UniqueIdMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.UnknownConnections"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnLocalUsersReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.LocalUsersReplyMessage})">
            <summary>Raises the LocalUsersReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnGlobalUsersReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.GlobalUsersReplyMessage})">
            <summary>Raises the GlobalUsersReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnTopicSetReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.TopicSetReplyMessage})">
            <summary>Raises the TopicSetReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnChannelCreationTime(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.ChannelCreationTimeMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.ChannelCreationTime"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnChannelProperty(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.ChannelPropertyMessage})">
            <summary>Raises the ChannelProperty event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnChannelPropertyReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.ChannelPropertyReplyMessage})">
            <summary>Raises the ChannelPropertyReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnChannelPropertyEndReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.ChannelPropertyEndReplyMessage})">
            <summary>Raises the ChannelPropertyEndReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnIrcx(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.IrcxMessage})">
            <summary>Raises the Ircx event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnIsIrcx(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.IsIrcxMessage})">
            <summary>Raises the IsIrcx event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnIrcxReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.IrcxReplyMessage})">
            <summary>Raises the IrcxReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnKnock(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.KnockMessage})">
            <summary>Raises the Knock event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnKnockReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.KnockReplyMessage})">
            <summary>Raises the KnockReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnKnockRequest(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.KnockRequestMessage})">
            <summary>Raises the KnockRequest event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnWhisper(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.WhisperMessage})">
            <summary>Raises the Whisper event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnWatchListClear(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.WatchListClearMessage})">
            <summary>Raises the WatchListClear event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnWatchListEditor(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.WatchListEditorMessage})">
            <summary>Raises the WatchListEditor event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnWatchListRequest(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.WatchListRequestMessage})">
            <summary>Raises the WatchListRequest event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnWatchStatusRequest(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.WatchStatusRequestMessage})">
            <summary>Raises the WatchStatusRequest event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnWatchListEndReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.WatchListEndReplyMessage})">
            <summary>Raises the WatchListEndReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnWatchStatusReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.WatchStatusReplyMessage})">
            <summary>Raises the WatchStatusReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnWatchStatusNicksReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.WatchStatusNicksReplyMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.WatchStatusNicksReply"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnWatchStopped(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.WatchStoppedMessage})">
            <summary>Raises the WatchStoppedReply event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnWatchedUserOnline(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.WatchedUserOnlineMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.WatchedUserOnline"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnWatchedUserOffline(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.WatchedUserOfflineMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.WatchedUserOffline"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnMonitorListClear(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.MonitorListClearMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.MonitorListClear"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnMonitorListRequest(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.MonitorListRequestMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.MonitorListRequest"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnMonitorStatusRequest(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.MonitorStatusRequestMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.MonitorStatusRequest"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnMonitorAddUsers(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.MonitorAddUsersMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.MonitorAddUsers"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnMonitorRemoveUsers(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.MonitorRemoveUsersMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.MonitorRemoveUsers"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnMonitoredUserOnline(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.MonitoredUserOnlineMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.MonitoredUserOnline"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnMonitoredUserOffline(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.MonitoredUserOfflineMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.MonitoredUserOffline"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnMonitorListReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.MonitorListReplyMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.MonitorListReply"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnMonitorListEndReply(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.MonitorListEndReplyMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.MonitorListEndReply"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnMonitorListFull(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.MonitorListFullMessage})">
            <summary>Raises the <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.MonitorListFull"/> event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnChannelScopedChat(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.ChannelScopedChatMessage})">
            <summary>Raises the ChannelScopedChat event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageConduit.OnChannelScopedNotice(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.ChannelScopedNoticeMessage})">
            <summary>Raises the ChannelScopedNotice event.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.GenericMessage">
            <summary>
            Occurs when an unrecognized message is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.GenericErrorMessage">
            <summary>
            Occurs when an unrecognized error message is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.ErroneousNick">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.ErroneousNickMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.NickCollision">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.NickCollisionMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.NickInUse">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.NickInUseMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.NoHostPermission">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.NoHostPermissionMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.NoNickGiven">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.NoNickGivenMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.NotRegistered">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.NotRegisteredMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.YouAreBanned">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.YouAreBannedMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.NoSuchChannel">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.NoSuchChannelMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.NoSuchNick">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.NoSuchNickMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.NoSuchServer">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.NoSuchServerMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.CannotSendToChannel">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.CannotSendToChannelMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.TooManyChannels">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.TooManyChannelsMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.TooManyTargets">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.TooManyChannelsMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.WasNoSuchNick">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.WasNoSuchNickMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.CannotUseColors">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.CannotUseColorsMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.NoPingOriginSpecified">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.NoPingOriginSpecifiedMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.NoRecipientGiven">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.NoRecipientGivenMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.NoTextToSend">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.NoTextToSendMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.TooManyLines">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.TooManyLinesMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.UnknownCommand">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.UnknownCommandMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.CannotChangeNickWhileBanned">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.CannotChangeNickWhileBannedMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.NickChangeTooFast">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.NickChangeTooFastMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.TargetChangeTooFast">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.TargetChangeTooFastMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.NotOnChannel">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.NotOnChannelMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.AlreadyOnChannel">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.AlreadyOnChannelMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.IdentChanged">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.IdentChangedMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.NotEnoughParameters">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.NotEnoughParametersMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.ChannelKeyAlreadySet">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.ChannelKeyAlreadySetMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.ChannelLimitReached">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.ChannelLimitReachedMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.UnknownChannelMode">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.UnknownChannelModeMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.ChannelIsInviteOnly">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.ChannelIsInviteOnlyMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.YouAreBannedFromChannel">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.YouAreBannedFromChannelMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.ChannelRequiresKey">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.ChannelRequiresKeyMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.ChannelRequiresRegisteredNick">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.ChannelRequiresRegisteredNickMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.BanListFull">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.BanListFullMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.ChannelOperatorStatusRequired">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.ChannelOperatorStatusRequiredMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.CannotRemoveServiceBot">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.CannotRemoveServiceBotMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.ChannelBlocked">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.ChannelBlockedMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.UnknownUserMode">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.UnknownUserModeMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.SilenceListFull">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.SilenceListFullMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.AcceptListFull">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.AcceptListFullMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.AcceptAlreadyExists">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.AcceptAlreadyExistsMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.AcceptDoesNotExist">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.AcceptDoesNotExistMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Ping">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.PingMessage"/> is received
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Pong">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.PongMessage"/> is received
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Chat">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.ChatMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Notice">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.NoticeMessage"/> is received
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.NickChange">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.NickChangeMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Join">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.JoinMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Part">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.PartMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Quit">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.QuitMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Kick">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.KickMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Topic">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.TopicMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.TopicReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.TopicReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.TopicNoneReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.TopicNoneReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Invite">
            <summary>Occurs when an <see cref="T:MetaBuilders.Irc.Messages.InviteMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Away">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.AwayMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Admin">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.AdminMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Back">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.BackMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.GenericNumericMessage">
            <summary>Occurs when a <see cref="E:MetaBuilders.Irc.Messages.MessageConduit.GenericNumericMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Info">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.InfoMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.IsOn">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.IsOnMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.IsOnReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.IsOnReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Kill">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.KillMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Links">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.LinksMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.LinksReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.LinksReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.LinksEndReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.LinksEndReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.List">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.ListMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.ListStartReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.ListStartReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.ListReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.ListReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.ListEndReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.ListEndReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Lusers">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.LusersMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.LusersReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.LusersReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.LusersOpReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.LusersOpReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.LusersMeReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.LusersMeReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.LusersChannelsReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.LusersChannelsReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Motd">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.MotdMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.MotdStartReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.MotdStartReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.MotdReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.MotdReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.MotdEndReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.MotdEndReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Names">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.NamesMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.NamesReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.NamesReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.NamesEndReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.NamesEndReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Oper">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.OperMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.OperReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.OperReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Password">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.PasswordMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.SelfAway">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.SelfAwayMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.SelfUnAway">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.SelfUnAwayMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Stats">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.StatsMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.StatsReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.StatsReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Time">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.TimeMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.ServerTimeReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.ServerTimeReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Trace">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.TraceMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.UserNotification">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.UserNotificationMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.UserNotificationServerSide">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.UserNotificationServerSideMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.UserAway">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.UserAwayMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Version">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.VersionMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Wallops">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.WallopsMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Wallchops">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.WallchopsMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Who">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.WhoMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.WhoReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.WhoReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.WhoEndReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.WhoEndReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.WhoIs">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.WhoIsMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.WhoIsChannelsReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.WhoIsChannelsReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.WhoIsIdleReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.WhoIsIdleReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.WhoIsOperReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.WhoIsOperReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.WhoIsServerReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.WhoIsServerReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.WhoIsUserReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.WhoIsUserReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.WhoIsEndReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.WhoIsEndReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.WhoIsRegisteredNickReply">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.WhoIsRegisteredNickReplyMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.WhoWas">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.WhoWasMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.WhoWasUserReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.WhoWasUserReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.WhoWasEndReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.WhoWasEndReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.UserHost">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.UserHostMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.UserHostReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.UserHostReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Silence">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.SilenceMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.SilenceReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.SilenceReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.SilenceEndReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.SilenceEndReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.AcceptListEditor">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.AcceptListEditorMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.AcceptListRequest">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.AcceptListRequestMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.AcceptListReply">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.AcceptListReplyMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.AcceptListEndReply">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.AcceptListEndReplyMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.ActionRequest">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.ActionRequestMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.GenericCtcpRequest">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.GenericCtcpReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.GenericCtcpReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.GenericCtcpRequestMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.ClientInfoRequest">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.ClientInfoRequestMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.ClientInfoReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.ClientInfoReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.FingerRequest">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.FingerRequestMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.FingerReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.FingerReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.PageRequest">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.PageRequestMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.ScriptRequest">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.ScriptRequestMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.ScriptReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.ScriptReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.PingRequest">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.PingRequestMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.PingReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.PingReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.TimeRequest">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.TimeRequestMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.TimeReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.TimeReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.VersionRequest">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.VersionRequestMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.VersionReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.VersionReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.UserInfoRequest">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.UserInfoRequestMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.UserInfoReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.UserInfoReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.SourceRequest">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.SourceRequestMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.SourceReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.SourceReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.SoundRequest">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.SoundRequestMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.ErrorReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.ErrorReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.ErrorRequest">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.ErrorRequestMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Mp3Request">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.Mp3RequestMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.SlotsRequest">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.SlotsRequestMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.DccChatRequest">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.DccChatRequestMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.DccSendRequest">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.DccSendRequestMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.DccGetRequest">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.DccGetRequestMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.DccResumeRequest">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.DccResumeRequestMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.DccAcceptRequest">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.DccAcceptRequestMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.UserMode">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.UserModeMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.ChannelMode">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.ChannelModeMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.ChannelModeIsReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.ChannelModeIsReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.UserModeIsReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.UserModeIsReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.BansReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.BansReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.BansEndReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.BansEndReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Welcome">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.WelcomeMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.YourHost">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.YourHostMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.ServerCreated">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.ServerCreatedMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.ServerInfo">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.ServerInfoMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Support">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.SupportMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.UnknownConnections">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.UnknownConnectionsMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.UniqueId">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.UniqueIdMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.LocalUsersReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.LocalUsersReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.GlobalUsersReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.GlobalUsersReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.TopicSetReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.TopicSetReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.ChannelCreationTime">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.ChannelCreationTimeMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.ChannelProperty">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.ChannelPropertyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.ChannelPropertyReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.ChannelPropertyReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.ChannelPropertyEndReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.ChannelPropertyEndReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Ircx">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.IrcxMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.IsIrcx">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.IsIrcxMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.IrcxReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.IrcxReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Knock">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.KnockMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.KnockReply">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.KnockReplyMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.KnockRequest">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.KnockRequestMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.Whisper">
            <summary>Occurs when a <see cref="T:MetaBuilders.Irc.Messages.WhisperMessage"/> is received.</summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.WatchListClear">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.WatchListClearMessage"/> is received
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.WatchListEditor">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.WatchListEditorMessage"/> is received
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.WatchListRequest">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.WatchListRequestMessage"/> is received
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.WatchStatusRequest">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.WatchStatusRequestMessage"/> is received
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.WatchListEndReply">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.WatchListEndReplyMessage"/> is received
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.WatchStatusReply">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.WatchStatusReplyMessage"/> is received
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.WatchStatusNicksReply">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.WatchStatusNicksReplyMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.WatchStopped">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.WatchStoppedMessage"/> is received
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.WatchedUserOnline">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.WatchedUserOnlineMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.WatchedUserOffline">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.WatchedUserOfflineMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.MonitorListClear">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.MonitorListClearMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.MonitorListRequest">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.MonitorListRequestMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.MonitorStatusRequest">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.MonitorStatusRequestMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.MonitorAddUsers">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.MonitorAddUsersMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.MonitorRemoveUsers">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.MonitorRemoveUsersMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.MonitoredUserOnline">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.MonitoredUserOnlineMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.MonitoredUserOffline">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.MonitoredUserOfflineMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.MonitorListReply">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.MonitorListReplyMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.MonitorListEndReply">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.MonitorListEndReplyMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.MonitorListFull">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.MonitorListFullMessage"/> is received.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.ChannelScopedChat">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.ChannelScopedChatMessage"/> is received
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Messages.MessageConduit.ChannelScopedNotice">
            <summary>
            Occurs when a <see cref="T:MetaBuilders.Irc.Messages.ChannelScopedNoticeMessage"/> is received
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Network.ConnectionStatus">
            <summary>
            Specifies the status of a <see cref="T:MetaBuilders.Irc.Network.ClientConnection"/>
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.ConnectionStatus.Disconnected">
            <summary>
            The connection is broken and not able to transmit.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.ConnectionStatus.Connecting">
            <summary>
            The connection is being made.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.ConnectionStatus.Connected">
            <summary>
            The connection is complete and ready to transmit.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.NoRecipientGivenMessage">
            <summary>
            Error message received primarily when a TextMessage is sent without any Targets.
            </summary>
            <remarks>
            Some other commands may also send this when no recipients are specified.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoRecipientGivenMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.NoRecipientGivenMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoRecipientGivenMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoRecipientGivenMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoRecipientGivenMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.NoRecipientGivenMessage.Command">
            <summary>
            Gets or sets the command of the message which was invalid.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.MonitoredUserOnlineMessage">
            <summary>
            A Monitor system notification that a monitored user is online
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitoredUserOnlineMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.MonitoredUserOnlineMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitoredUserOnlineMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitoredUserOnlineMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitoredUserOnlineMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.MonitoredUserOnlineMessage.Users">
            <summary>
            Gets the collection of users who are online.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.MonitorListFullMessage">
            <summary>
            A Monitor system error message informing the user which nicks couldn't be added 
            to their monitor list because it is full.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitorListFullMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.MonitorListFullMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitorListFullMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitorListFullMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitorListFullMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.MonitorListFullMessage.Limit">
            <summary>
            Gets or sets the limit of monitor lists on the server.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.MonitorListFullMessage.Nicks">
            <summary>
            Gets the collection of nicks which couldn't be added to the monitor list.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.UserCollection">
            <summary>
                <para>
                  A collection that stores <see cref="T:MetaBuilders.Irc.User"/> objects.
               </para>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.UserCollection.RemoveFirst(System.Predicate{MetaBuilders.Irc.User})">
            <summary>
            Removes the first User in the collection which is matched by the Predicate.
            </summary>
            <returns>True if a User was removed, false if no User was removed.</returns>
        </member>
        <member name="M:MetaBuilders.Irc.UserCollection.RemoveFirst(System.String)">
            <summary>
            Removes the first User in the collection which has the given nick.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.UserCollection.Find(System.Predicate{MetaBuilders.Irc.User})">
            <summary>
            Finds the first User in the collection which matches the given Predicate.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.UserCollection.Find(System.String)">
            <summary>
            Finds the first User in the collection which matches the given nick.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.UserCollection.EnsureUser(System.String)">
            <summary>
            Ensures that the collection has a User with the given nick.
            </summary>
            <remarks>
            If no User has the given nick, then a new User is created with the nick, and is added to the collection.
            </remarks>
            <param name="nick">The nick to ensure.</param>
            <returns>The User in the collection with the given nick.</returns>
        </member>
        <member name="M:MetaBuilders.Irc.UserCollection.EnsureUser(MetaBuilders.Irc.User)">
            <summary>
            Ensures that the collection has a User which matches the nick of the given User.
            </summary>
            <remarks>
            If no User matches the given User, then the given User added to the collection.
            If a User is found, then the existing User is merged with the given User.
            </remarks>
            <returns>The User in the collection which matches the given User.</returns>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ChatMessage">
            <summary>
            This message is the standard communication message for irc.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.TextMessage">
            <summary>
            A <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> which carries communication from a person to another person or channel.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TextMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TextMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TextMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TextMessage.IsQueryToUser(MetaBuilders.Irc.User)">
            <summary>
            Determines if the current message is targeted at a query to the given user.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.TextMessage.Targets">
            <summary>
            Gets the target of this <see cref="T:MetaBuilders.Irc.Messages.TextMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.TextMessage.Text">
            <summary>
            Gets or sets the actual text of this <see cref="T:MetaBuilders.Irc.Messages.TextMessage"/>.
            </summary>
            <remarks>
            This property holds the core purpose of irc itself... sending text communication to others.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChatMessage.CreateInstance">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ChatMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChatMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ChatMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChatMessage.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ChatMessage"/> class with the given text string.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChatMessage.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ChatMessage"/> class with the given text string and target channel or user.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChatMessage.#ctor(System.String,System.String[])">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ChatMessage"/> class with the given text string and target channels or users.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChatMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChatMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WatchStatusReplyMessage">
            <summary>
            A reply for the <see cref="T:MetaBuilders.Irc.Messages.WatchStatusRequestMessage"/> query.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchStatusReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.WatchStatusRequestMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchStatusReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchStatusReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchStatusReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WatchStatusReplyMessage.WatchListCount">
            <summary>
            Gets or sets the number of watched users that you have on your watch list.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WatchStatusReplyMessage.UsersWatchingYou">
            <summary>
            Gets or sets the number of users which you on their watch list.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.StatsReplyMessage">
            <summary>
            The reply to a <see cref="T:MetaBuilders.Irc.Messages.StatsMessage"/> query.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.StatsReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.StatsReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.StatsReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.StatsReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.StatsReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.StatsReplyMessage.Stats">
            <summary>
            The information requested.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.BansEndReplyMessage">
            <summary>
            Signifies the end of the reply listing Bans on a channel.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.BansEndReplyMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.BansEndReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.BansEndReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.BansEndReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.BansEndReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.BansEndReplyMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.BansEndReplyMessage.Channel">
            <summary>
            Gets or sets the channel the ban list refers to.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.AwayMessage">
            <summary>
            With the AwayMessage, clients can set an automatic reply string for any <see cref="T:MetaBuilders.Irc.Messages.ChatMessage"/>s directed at them (not to a channel they are on).
            </summary>
            <remarks>
            The automatic reply is sent by the server to client sending the <see cref="T:MetaBuilders.Irc.Messages.ChatMessage"/>.
            The only replying server is the one to which the sending client is connected to.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AwayMessage.#ctor">
            <summary>
            Creates a new instance of the AwayMessage class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AwayMessage.#ctor(System.String)">
            <summary>
            Creates a new instance of the AwayMessage class with the given reason.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AwayMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AwayMessage.CanParse(System.String)">
            <summary>
            Determines if the message can be parsed by this type.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AwayMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AwayMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.AwayMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.AwayMessage.Reason">
            <summary>
            Gets or sets the reason for being away.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.MessageUtil">
            <summary>
            Provides simple utilities for parsing and generating messages.
            </summary>
            <remarks>
            Client code will probably not need to use most of these routines.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageUtil.EnsureValidChannelName(System.String,MetaBuilders.Irc.ServerSupport)">
            <summary>
            Takes the given channel name, and returns a name that is valid according to the given server support.
            </summary>
            <param name="channelName">The channel name to examine</param>
            <param name="support">The feature support of an irc server</param>
            <returns>A valid channel name on the given server.</returns>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageUtil.HasValidChannelPrefix(System.String)">
            <summary>
            Determines if the given channel name has a valid namespace prefix.
            </summary>
            <remarks>
            This is according to the IRC spec, and is not representative of what a particular server may support.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageUtil.ParametersToString(System.Boolean,System.Collections.Specialized.StringCollection)">
            <summary>
            Creates a list of irc parameters from the given collection of strings.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageUtil.ParametersToString(System.Boolean,System.String[])">
            <summary>
            Creates a list of irc parameters from the given array of strings.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageUtil.ParametersToString(System.Collections.Specialized.StringCollection)">
            <summary>
            Creates a list of irc parameters from the given collection of strings.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageUtil.ParametersToString(System.String[])">
            <summary>
            Creates a list of irc parameters from the given array of strings.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageUtil.CreateList(System.Collections.Specialized.StringCollection,System.String)">
            <summary>
            Creates a space-delimited list from the given StringCollection, using delimiter.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageUtil.CreateList(System.String[],System.String)">
            <summary>
            Creates a char-delimited list from the given String[], using delimiter.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageUtil.CreateList(System.Collections.IList,System.String)">
            <summary>
            Creates a char-delimited list from the given IList of objects, using delimiter.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageUtil.CreateList``1(System.Collections.Generic.IEnumerable{``0},System.String,MetaBuilders.Irc.Messages.CustomListItemRendering{``0})">
            <summary>
            Creates a char-delimited list from the given IEnumerable of objects, using delimiter.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageUtil.GetPrefix(System.String)">
            <summary>
            Extracts the Prefix from a string message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageUtil.GetCommand(System.String)">
            <summary>
            Extracts the Command from a string message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageUtil.GetParameters(System.String)">
            <summary>
            Gets the parameters of the raw message.
            </summary>
            <param name="rawMessage">the message string which has the parameters.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageUtil.Tokenize(System.String,System.Int32)">
            <summary>
            Seperates the given space-delimted parameter string into a collection.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageUtil.GetLastParameter(System.String)">
            <summary>
            Gets the last parameter in the parameters collection of the given unparsed message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageUtil.GetParameter(System.String,System.Int32)">
            <summary>
            Gets the nth parameter in the parameters collection of the given unparsed message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageUtil.StringBetweenStrings(System.String,System.String,System.String)">
            <summary>
            Gets the substring in the input string existing between the given two strings.
            </summary>
            <param name="input">The string to search in.</param>
            <param name="before">The string before the one you want.</param>
            <param name="after">The string after the one you want.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageUtil.NthIndexOf(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the index of the nth time that searchValue shows up in text.
            </summary>
            <param name="text">The string to search in.</param>
            <param name="searchValue">The string to search for.</param>
            <param name="startIndex">The place to start looking.</param>
            <param name="nthItem">The item to stop at.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageUtil.ConvertToUnixTime(System.DateTime)">
            <summary>
            Turns a <see cref="T:System.DateTime"/> into the Int32 representation as is commonly used on Unix machines
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageUtil.ConvertFromUnixTime(System.Int32)">
            <summary>
            Turns the given Unix representation of a datetime into a <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageUtil.ConvertFromUnixTime(System.String)">
            <summary>
            Converts the given Unix representation of a datetime into a <see cref="T:System.Nullable`1"/>.
            </summary>
            <remarks>
            If the string can't be parsed, a null DateTime is returned.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageUtil.IsIgnoreCaseMatch(System.String,System.String)">
            <summary>
            Determines if the given strings match eachother using <see href="StringComparison.InvariantCultureIgnoreCase" /> matching.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageUtil.ContainsIgnoreCaseMatch(System.Collections.Specialized.StringCollection,System.String)">
            <summary>
            Determines if the given collection of strings contains a string which matches the given string using <see href="StringComparison.InvariantCultureIgnoreCase" /> matching.
            </summary>
            <param name="strings">The list to look in</param>
            <param name="match">The string to look for</param>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.IrcMessageEventArgs`1">
            <summary>
            The information for a handler of any standard IrcMessage event.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IrcMessageEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MetaBuilders.Irc.Messages.IrcMessageEventArgs`1"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.IrcMessageEventArgs`1.Message">
            <summary>
            Gets or sets the Message for the event.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ChannelPropertyReplyMessage">
            <summary>
            A reply to a <see cref="T:MetaBuilders.Irc.Messages.ChannelPropertyMessage"/> designed to read one or all channel properties.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelPropertyReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ChannelPropertyReplyMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelPropertyReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelPropertyReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelPropertyReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelPropertyReplyMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelPropertyReplyMessage.Channel">
            <summary>
            Gets or sets channel being referenced.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelPropertyReplyMessage.Prop">
            <summary>
            Gets or sets the name of the channel property being referenced.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelPropertyReplyMessage.Value">
            <summary>
            Gets or sets the value of the channel property.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ErrorRequestMessage">
            <summary>
            I see no real need for this message... but it should generate an <see cref="T:MetaBuilders.Irc.Messages.ErrorReplyMessage"/> from the target.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ErrorRequestMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ErrorRequestMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ErrorRequestMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ErrorRequestMessage.Parse(System.String)">
            <summary>
            Parses the given string to populate this <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ErrorRequestMessage.Query">
            <summary>
            Gets or sets the string to be parroted back to you, with an indication that no error occured.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ErrorRequestMessage.ExtendedData">
            <summary>
            Gets the data payload of the Ctcp request.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.PartMessage">
            <summary>
            The PartMessage causes the client sending the message to be removed 
            from the list of active users for all given channels listed in the <see cref="P:MetaBuilders.Irc.Messages.PartMessage.Channels"/> property.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.PartMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.PartMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.PartMessage.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.PartMessage"/> class with the given channel.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.PartMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.PartMessage.Validate(MetaBuilders.Irc.ServerSupport)">
            <summary>
            Validates this message against the given server support
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.PartMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parse the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.PartMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.PartMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.PartMessage.Channels">
            <summary>
            Gets the channel name parted.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.PartMessage.Reason">
            <summary>
            Gets or sets the reason for the part.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.PartMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.SecretMode">
            <summary>
            This mode conceals the existence of the channel from other users. 
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.SecretMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.SecretMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.SecretMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.SecretMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.SecretMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.DeafMode">
            <summary>
            This mode signifies that the user does not receive channal chat messages
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.DeafMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.DeafMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.DeafMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.DeafMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.DeafMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.SilenceListFullMessage">
            <summary>
            The ErrorMessage received when a user's silence list is full, and a SilenceMessage is sent adding a User to the list.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SilenceListFullMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.SilenceListFullMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SilenceListFullMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SilenceListFullMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SilenceListFullMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.SilenceListFullMessage.SilenceMask">
            <summary>
            Gets or sets the mask of the user being silenced
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.UserModesCreator">
            <summary>
            UserModesCreator parses, builds, and writes the modes used by the <see cref="T:MetaBuilders.Irc.Messages.UserModeMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.UserModesCreator.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.UserModesCreator"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.UserModesCreator.Parse(MetaBuilders.Irc.Messages.UserModeMessage)">
            <summary>
            Loads the given mode data into this <see cref="T:MetaBuilders.Irc.Messages.Modes.UserModesCreator"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.UserModesCreator.Parse(System.String)">
            <summary>
            Loads the given mode data into this <see cref="T:MetaBuilders.Irc.Messages.Modes.UserModesCreator"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.UserModesCreator.CollapseModes">
            <summary>
            Removes redundant or overridden modes from the modes collection.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.UserModesCreator.ApplyTo(MetaBuilders.Irc.Messages.UserModeMessage)">
            <summary>
            Applies the current modes to the given <see cref="T:MetaBuilders.Irc.Messages.UserModeMessage"/>.
            </summary>
            <param name="msg">The message to be altered.</param>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.UserModesCreator.Modes">
            <summary>
            Gets the collection of modes parsed or to be applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.InvisibleMode">
            <summary>
            This mode signifies that the user is invisible to other users.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.InvisibleMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.InvisibleMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.InvisibleMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.InvisibleMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.InvisibleMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.AwayMode">
            <summary>
            This mode signifies that the user is away.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.AwayMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.AwayMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.AwayMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.AwayMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.AwayMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.TopicNoneReplyMessage">
            <summary>
            The reply to a <see cref="T:MetaBuilders.Irc.Messages.TopicMessage"/> which requests the topic, 
            and there is none set.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TopicNoneReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.TopicNoneReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TopicNoneReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TopicNoneReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TopicNoneReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TopicNoneReplyMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.TopicNoneReplyMessage.Channel">
            <summary>
            The name of the channel which has no topic set.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.SelfUnAwayMessage">
            <summary>
            This message is received from the server when it acknowledges a client's
            <see cref="T:MetaBuilders.Irc.Messages.BackMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SelfUnAwayMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.SelfUnAwayMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SelfUnAwayMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SelfUnAwayMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.SelfAwayMessage">
            <summary>
            This message is received from the server when it acknowledges a client's
            <see cref="T:MetaBuilders.Irc.Messages.AwayMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SelfAwayMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.SelfAwayMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SelfAwayMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SelfAwayMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WatchedUserNowOnlineMessage">
            <summary>
            A Watch system notification that a user is online.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchedUserNowOnlineMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.WatchedUserNowOnlineMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WatchedUserNowOnlineMessage.ChangeMessage">
            <exclude />
        </member>
        <member name="T:MetaBuilders.Irc.Messages.LusersOpReplyMessage">
            <summary>
            One of the responses to the <see cref="T:MetaBuilders.Irc.Messages.LusersMessage"/> query.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LusersOpReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.LusersOpReplyMessage"/> class
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LusersOpReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LusersOpReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LusersOpReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.LusersOpReplyMessage.OpCount">
            <summary>
            Gets or sets the number of irc operators connected to the server.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.LusersOpReplyMessage.Info">
            <summary>
            Gets or sets any additionaly information about the operators connected.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.LocalUsersReplyMessage">
            <summary>
            This message indicates the number of local-server users.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LocalUsersReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.LocalUsersReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LocalUsersReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LocalUsersReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LocalUsersReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.LocalUsersReplyMessage.UserCount">
            <summary>
            Gets or sets the number of local users.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.LocalUsersReplyMessage.UserLimit">
            <summary>
            Gets or sets the maximum number of users for the server.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.NoNickGivenMessage">
            <summary>
            Returned when a nickname parameter expected for a command and isn't found.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoNickGivenMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.NoNickGivenMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoNickGivenMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoNickGivenMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.CannotSendToChannelMessage">
            <summary>
            Sent to a user who is either (a) not on a channel which is mode +n or (b) not a chanop (or mode +v) on a channel which has mode +m set or where the user is	banned and is trying to send a PRIVMSG message to	that channel.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CannotSendToChannelMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.CannotSendToChannelMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CannotSendToChannelMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CannotSendToChannelMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CannotSendToChannelMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CannotSendToChannelMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.CannotSendToChannelMessage.Channel">
            <summary>
            The channel to which the message can't be sent.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.KillMessage">
            <summary>
            The KillMessage is used to cause a client-server connection to be closed by the server which has the actual connection.
            </summary>
            <remarks>
            KillMessage is used by servers when they encounter a duplicate entry in the list of valid nicknames and is used to remove both entries. 
            It is also available to operators.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.KillMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.KillMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.KillMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.KillMessage.Nick">
            <summary>
            Gets or sets the nick of the user killed.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.KillMessage.Reason">
            <summary>
            Gets or sets the reason for the kill.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.KillMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ChannelPropertyEndReplyMessage">
            <summary>
            Marks the end of the replies to a <see cref="T:MetaBuilders.Irc.Messages.ChannelPropertyMessage"/> designed to read one or all channel properties.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelPropertyEndReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ChannelPropertyEndReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelPropertyEndReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelPropertyEndReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelPropertyEndReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelPropertyEndReplyMessage.Channel">
            <summary>
            Gets or sets channel being referenced.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.GenericMessage">
            <summary>
            Represents a single generic rfc1459 irc message to or from an irc server
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.GenericMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            This is not meant to be used from your code.
            </summary>
            <remarks>
            The conduit calls Notify on messages to have the message raise the appropriate event on the conduit.
            This is done automaticly by your <see cref="T:MetaBuilders.Irc.Client"/> after message are recieved and parsed.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.GenericMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.GenericMessage.CanParse(System.String)">
            <summary>
            Determines if the given string is parsable by this <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
            <remarks>
            <see cref="T:MetaBuilders.Irc.Messages.GenericMessage"/> always returns true.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.GenericMessage.ParseCommand(System.String)">
            <summary>
            Parses the command portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.GenericMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameter portion of the message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.GenericMessage.Command">
            <summary>
            Gets or sets the message's Command
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.GenericMessage.Parameters">
            <summary>
            Gets the message's parameters after the command.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.PrivateMode">
            <summary>
            This mode conceals the existence of the channel from other users. 
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.PrivateMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.PrivateMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.PrivateMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.PrivateMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.PrivateMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.ChannelModesCreator">
            <summary>
            ChannelModesCreator parses, builds, and writes the modes used by the <see cref="T:MetaBuilders.Irc.Messages.ChannelModeMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ChannelModesCreator.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.ChannelModesCreator"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ChannelModesCreator.Parse(System.String,System.Collections.Specialized.StringCollection)">
            <summary>
            Loads the given mode data into this <see cref="T:MetaBuilders.Irc.Messages.Modes.ChannelModesCreator"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ChannelModesCreator.Parse(MetaBuilders.Irc.Messages.ChannelModeMessage)">
            <summary>
            Loads the given mode data into this <see cref="T:MetaBuilders.Irc.Messages.Modes.ChannelModesCreator"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ChannelModesCreator.Parse(System.String)">
            <summary>
            Loads the given mode data into this <see cref="T:MetaBuilders.Irc.Messages.Modes.ChannelModesCreator"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ChannelModesCreator.CollapseModes">
            <summary>
            Removes redundant or overridden modes from the modes collection.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ChannelModesCreator.ApplyTo(MetaBuilders.Irc.Messages.ChannelModeMessage)">
            <summary>
            Applies the current modes to the given <see cref="T:MetaBuilders.Irc.Messages.ChannelModeMessage"/>.
            </summary>
            <param name="msg">The message to be altered.</param>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.ChannelModesCreator.ServerSupport">
            <summary>
            A <see cref="T:MetaBuilders.Irc.ServerSupport"/> instance is required in order to parse non-standard modes.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.ChannelModesCreator.Modes">
            <summary>
            Gets the collection of modes parsed or to be applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.BanMode">
            <summary>
            This mode defines a mask for users not allowed to join a channel.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.BanMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.BanMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.BanMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.BanMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.BanMode.#ctor(MetaBuilders.Irc.Messages.ModeAction,MetaBuilders.Irc.User)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.BanMode"/> class 
            with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/> and <see cref="T:MetaBuilders.Irc.User"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.BanMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.AnonymousMode">
            <summary>
            This mode defines an anonymous channel.
            </summary>
            <remarks>
            <p>
            This means that when a message sent to the channel is sent by the server to users, 
            and the origin is a user, then it MUST be masked. 
            To mask the message, the origin is changed to "anonymous!anonymous@anonymous."
            </p>
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.AnonymousMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.AnonymousMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.AnonymousMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.AnonymousMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.AnonymousMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.DccSendRequestMessage">
            <summary>
            This message is a request to send a file directly from the sender of the request to the receiver.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.DccSendRequestMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.DccSendRequestMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.DccSendRequestMessage.CanParseDccCommand(System.String)">
            <summary>
            Determines if the message's DCC command is compatible with this message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.DccSendRequestMessage.Parse(System.String)">
            <summary>
            Parses the given string to populate this <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.DccSendRequestMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.DccSendRequestMessage.ExtendedData">
            <summary>
            Gets the data payload of the Ctcp request.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.DccSendRequestMessage.DccCommand">
            <summary>
            Gets the dcc sub-command.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.DccSendRequestMessage.DccArgument">
            <summary>
            Gets the dcc sub-command's argument.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.DccSendRequestMessage.FileName">
            <summary>
            Gets or sets the name of the file being sent.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.DccSendRequestMessage.Size">
            <summary>
            Gets or sets the size of the file being sent.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.DccSendRequestMessage.TurboMode">
            <summary>
            Gets or sets if the dcc connection should use turbo mode.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.DccSendRequestMessage.Secure">
            <summary>
            Gets or sets if the dcc connection should use SSL.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.NoPingOriginSpecifiedMessage">
            <summary>
            Sent to a user who sends a PingMessage which doesn't have a valid origin.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoPingOriginSpecifiedMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.NoPingOriginSpecifiedMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoPingOriginSpecifiedMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoPingOriginSpecifiedMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.NotOnChannelMessage">
            <summary>
            The ErrorMessage received when a user tries to perform a channel-specific operation on a user, 
            and the user isn't in the channel.
            </summary>
            <remarks>
            You will often get this if you attempt to kick a user but someone else kicks them before you do. 
            If the user does not actually exist at all, 401 will be returned instead. 
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NotOnChannelMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.NotOnChannelMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NotOnChannelMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NotOnChannelMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NotOnChannelMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NotOnChannelMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.NotOnChannelMessage.Nick">
            <summary>
            Gets or sets the nick of the user being targeted
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.NotOnChannelMessage.Channel">
            <summary>
            Gets or sets the channel being targeted
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ChannelOperatorStatusRequiredMessage">
            <summary>
            The ErrorMessage received when a user tries to perform a command which requires
            channel-operator status.
            </summary>
            <remarks>
            Channel-operator status is set with the OperatorMode of the ChannelModeMessage.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelOperatorStatusRequiredMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.ChannelOperatorStatusRequiredMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelOperatorStatusRequiredMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelOperatorStatusRequiredMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelOperatorStatusRequiredMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelOperatorStatusRequiredMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelOperatorStatusRequiredMessage.Channel">
            <summary>
            Gets or sets the channel on which the command requires OperatorMode status
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.ServerSupport">
            <summary>
            Contains information about what irc extensions and such the server supports.
            </summary>
            <remarks>
            This information is sent from a <see cref="T:MetaBuilders.Irc.Client"/> when it receives a <see cref="T:MetaBuilders.Irc.Messages.SupportMessage"/>.
            This most likely makes it unneccesary to catch this message's received event.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.ServerSupport.LoadInfo(MetaBuilders.Irc.Messages.SupportMessage)">
            <summary>
            Loads support information from the given <see cref="T:MetaBuilders.Irc.Messages.SupportMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.DefaultSupport">
            <summary>
            
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.DeafMode">
            <summary>
            Gets or sets if the server supports the Deaf user mode
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.Standard">
            <summary>
            Gets or sets the standard used by the server.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.ChannelStatuses">
            <summary>
            Gets or sets a list of channel modes a person can get and the respective prefix a channel or nickname will get in case the person has it.
            </summary>
            <remarks>
            The order of the modes goes from most powerful to least powerful. 
            Those prefixes are shown in the output of the WHOIS, WHO and NAMES command.
            </remarks>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.StatusMessages">
            <summary>
            Gets or sets the channel status prefixes supported for matched-status-only messages
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.ChannelTypes">
            <summary>
            Gets the supported channel prefixes.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.ModesWithParameters">
            <summary>
            Gets the modes that require parameters
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.ModesWithParametersWhenSet">
            <summary>
            Gets the modes that require parameters only when set.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.ModesWithoutParameters">
            <summary>
            Gets the modes that do not require parameters.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.MaxModes">
            <summary>
            Maximum number of channel modes with parameter allowed per <see cref="T:MetaBuilders.Irc.Messages.ChannelModeMessage"/> command.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.MaxChannels">
            <summary>
            Gets or sets the maximum number of channels a client can join.
            </summary>
            <remarks>
            This property is considered obsolete, as most servers use the ChannelLimits property instead.
            </remarks>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.ChannelLimits">
            <summary>
            Gets the collection of channel limits, grouped by channel type (ex, #, +).
            </summary>
            <remarks>This property has replaced MaxChannels becuase of the added flexibility.</remarks>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.MaxNickLength">
            <summary>
            Gets or sets the maximum nickname length.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.MaxTopicLength">
            <summary>
            Gets or sets the maximum channel topic length.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.MaxKickCommentLength">
            <summary>
            Gets or sets the maximum length of the reason in a <see cref="T:MetaBuilders.Irc.Messages.KickMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.MaxChannelNameLength">
            <summary>
            Gets or sets the maximum length of a channel name.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.MaxBans">
            <summary>
            Gets or sets the maximum number of bans that a channel can have.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.MaxInvitationExceptions">
            <summary>
            Gets or sets the Maximum number of invitation exceptions a channel can have.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.MaxBanExceptions">
            <summary>
            Gets or sets the maximum number of ban exceptions that a channel can have.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.NetworkName">
            <summary>
            Gets or sets the name of the network which the server is on.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.BanExceptions">
            <summary>
            Gets or sets if the server supports channel ban exceptions. 
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.InvitationExceptions">
            <summary>
            Gets or sets if the server supports channel invitation exceptions.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.MaxSilences">
            <summary>
            Gets or sets the maximum number of silence ( serverside ignore ) listings a client can store.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.MessagesToOperators">
            <summary>
            Gets or sets if the server supports messages to channel operators.
            </summary>
            <remarks>
            To send a message to channel operators, use a <see cref="T:MetaBuilders.Irc.Messages.NoticeMessage"/>
            with a target in the format "@#channel".
            </remarks>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.CaseMapping">
            <summary>
            Gets or sets the case mapping supported by the server.
            </summary>
            <remarks>"ascii", "rfc1459", and "strict-rfc1459" are the only known values.</remarks>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.CharacterSet">
            <summary>
            Gets or sets the text encoding used by the server.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.Rfc2812">
            <summary>
            Gets or sets if the server supports the standards declared in rfc 2812.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.ChannelIdLength">
            <summary>
            Gets or sets the length of channel ids.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.Penalties">
            <summary>
            Gets or sets if the server has a message penalty.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.ForcedNickChanges">
            <summary>
            Gets or sets if the server will change your nick automatticly when it needs to.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.UserIP">
            <summary>
            Gets or sets if the server supports the USERIP command.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.ChannelMessages">
            <summary>
            Gets or sets if the server supports the CPRIVMSG command.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.ChannelNotices">
            <summary>
            Gets or sets if the server supports the CNOTICE command.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.MaxMessageTargets">
            <summary>
            Gets or sets the maximum number of targets allowed on targetted messages, grouped by message command
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.Knock">
            <summary>
            Gets or sets if the server supports the <see cref="T:MetaBuilders.Irc.Messages.KnockMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.VirtualChannels">
            <summary>
            Gets or sets if the server supports virtual channels.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.SafeList">
            <summary>
            Gets or sets if the <see cref="T:MetaBuilders.Irc.Messages.ListReplyMessage"/> is sent in multiple itterations.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.ExtendedList">
            <summary>
            Gets or sets the extended parameters the server supports for a <see cref="T:MetaBuilders.Irc.Messages.ListMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.MaxWatches">
            <summary>
            Gets or sets the maximum number of watches a user is allowed to set.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.WhoX">
            <summary>
            Gets or sets if the <see cref="T:MetaBuilders.Irc.Messages.WhoMessage"/> uses the WHOX protocol
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.CallerId">
            <summary>
            Gets or sets if the server suports callerid-style ignore.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.ETrace">
            <summary>
            Gets or sets if the server supports ETrace.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.MaxMonitors">
            <summary>
            Gets or sets the maximum number of user monitors a user is allowed to set.
            </summary>
            <remarks>
            A value of 0 indicates that the server doesn't support the monitor system.
            A value of -1 indicates that the server has no limit to the users on the monitor system list.
            A value greater than 0 indicates the maximum number of users which can be added to the monitor system list.
            </remarks>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.SafeChannelPrefixLengths">
            <summary>
            Gets the collection of safe channel prefix lengths, grouped by the channel type they apply to.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.MaxAwayMessageLength">
            <summary>
            Gets or sets the maximum length of away messages.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerSupport.UnknownItems">
            <summary>
            Gets the list of unknown items supported by the server.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.ServerSupport.ExtendedListParameters">
            <summary>
            The extended parameters which the server can support on a List message.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.ServerSupport.ExtendedListParameters.None">
            <summary>
            No extended parameters are supported
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.ServerSupport.ExtendedListParameters.Mask">
            <summary>
            Searching by matching only the given mask is supported
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.ServerSupport.ExtendedListParameters.NotMask">
            <summary>
            Searching by not matching the given mask is supported
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.ServerSupport.ExtendedListParameters.UserCount">
            <summary>
            Searching by number of users in the channel is supported
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.ServerSupport.ExtendedListParameters.CreationTime">
            <summary>
            Searching by the channel creation time is supported
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.ServerSupport.ExtendedListParameters.Topic">
            <summary>
            Searching by the most recent change in a channel's topic is supported
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.ReceiveOperWallopsMode">
            <summary>
            This mode signifies that the user will receive debug messages.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ReceiveOperWallopsMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.ReceiveOperWallopsMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ReceiveOperWallopsMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.ReceiveOperWallopsMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.ReceiveOperWallopsMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.ReceiveBotNoticesMode">
            <summary>
            This mode signifies that the user will receive bot notice messages.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ReceiveBotNoticesMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.ReceiveBotNoticesMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ReceiveBotNoticesMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.ReceiveBotNoticesMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.ReceiveBotNoticesMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.LinksMessage">
            <summary>
            The <see cref="T:MetaBuilders.Irc.Messages.LinksMessage"/> asks the server to send a list all servers which are known by the server answering the message.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ServerQueryBase">
            <summary>
            The base class for server query messages.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ServerQueryBase.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ServerQueryBase.Target">
            <summary>
            Gets or sets the target server of the query.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ServerQueryBase.TargetParsingPosition">
            <summary>
            Gets the index of the parameter which holds the server which should respond to the query.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LinksMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LinksMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LinksMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.LinksMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.LinksMessage.Mask">
            <summary>
            Gets or sets the mask for server info to limit the list or replies.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WatchStoppedMessage">
            <summary>
            A Watch system notification that a user has been removed from your watch list.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchStoppedMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.WatchStoppedMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchStoppedMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WatchStoppedMessage.ChangeMessage">
            <exclude />
        </member>
        <member name="T:MetaBuilders.Irc.Messages.NamesEndReplyMessage">
            <summary>
            Marks the end of the replies to a <see cref="T:MetaBuilders.Irc.Messages.NamesMessage"/> query.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NamesEndReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.NamesEndReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NamesEndReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NamesEndReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NamesEndReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NamesEndReplyMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.NamesEndReplyMessage.Channel">
            <summary>
            Gets or sets the channel to which this reply list ends.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.MotdStartReplyMessage">
            <summary>
            Signifies the start of the motd sent by the server.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MotdStartReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.MotdStartReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MotdStartReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MotdStartReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.ParseParameters(System.Collections.Specialized.StringCollection)"/>
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MotdStartReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.MotdStartReplyMessage.Info">
            <summary>
            Gets or sets the info included in the message.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.LusersMeReplyMessage">
            <summary>
            One of the responses to the <see cref="T:MetaBuilders.Irc.Messages.LusersMessage"/> query.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LusersMeReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.LusersMeReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LusersMeReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LusersMeReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LusersMeReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.LusersMeReplyMessage.ClientCount">
            <summary>
            Gets or sets the number of clients connected to the server.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.LusersMeReplyMessage.ServerCount">
            <summary>
            Gets or sets the number of servers linked to the current server.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.LinksReplyMessage">
            <summary>
            The reply to the <see cref="T:MetaBuilders.Irc.Messages.LinksMessage"/> query.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LinksReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.LinksReplyMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LinksReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LinksReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LinksReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.LinksReplyMessage.Mask">
            <summary>
            Gets or sets the mask which will limit the list of returned servers.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.LinksReplyMessage.Server">
            <summary>
            Gets or sets the server which should respond.
            </summary>
            <remarks>
            If empty, the current server is used.
            </remarks>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.LinksReplyMessage.HopCount">
            <summary>
            Gets or sets the number of hops from the answering server to the listed server.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.LinksReplyMessage.ServerInfo">
            <summary>
            Gets or sets any additional server information.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.IrcxReplyMessage">
            <summary>
            A reply to a <see cref="T:MetaBuilders.Irc.Messages.IrcxMessage"/> or a <see cref="T:MetaBuilders.Irc.Messages.IsIrcxMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IrcxReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.IrcxReplyMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IrcxReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IrcxReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IrcxReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.IrcxReplyMessage.IsIrcxClientMode">
            <summary>
            Gets or sets if the server has set the client into ircx mode.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.IrcxReplyMessage.Version">
            <summary>
            Gets or sets the version of Ircx the server implements.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.IrcxReplyMessage.AuthenticationPackages">
            <summary>
            Gets the collection of authentication packages
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.IrcxReplyMessage.MaximumMessageLength">
            <summary>
            Gets or sets the maximum message length, in bytes.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.IrcxReplyMessage.Tokens">
            <summary>
            Gets or sets the tokens
            </summary>
            <remarks>
            There are no known servers that implement this property.
            It is almost always just *.
            </remarks>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.PageRequestMessage">
            <summary>
            Sends a page request to the target.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.PageRequestMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.PageRequestMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.PageRequestMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.ModeratedMode">
            <summary>
            This mode is used to control who may speak on a channel. 
            When it is set, only channel operators, 
            and members who have been given the voice privilege may send messages to the channel. 
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ModeratedMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.ModeratedMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ModeratedMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.ModeratedMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.ModeratedMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.KickMessage">
            <summary>
            The KickMessage can be used to forcibly remove a user from a channel.
            It 'kicks them out' of the channel.
            </summary>
            <remarks>
            Only a channel operator may kick another user out of a channel.
            This message wraps the KICK message.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.KickMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.KickMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.KickMessage.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.KickMessage"/> class with the given channel and nick.
            </summary>
            <param name="channel">The name of the channel affected.</param>
            <param name="nick">The nick of the user being kicked out.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.KickMessage.Validate(MetaBuilders.Irc.ServerSupport)">
            <summary>
            Validates this message against the given server support
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.KickMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.KickMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.KickMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.KickMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.KickMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.KickMessage.Channels">
            <summary>
            Gets the channels affected.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.KickMessage.Nicks">
            <summary>
            Gets the nicks of the users being kicked.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.KickMessage.Reason">
            <summary>
            Gets or sets the reason for the kick
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.ServerQuery">
            <summary>
            Represents a status window for communication between the user and the server
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.ServerQuery.#ctor(MetaBuilders.Irc.Client)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Query"/> class on the given client with the given User.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerQuery.Journal">
            <summary>
            Gets the journal of messages on the query
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ServerQuery.Client">
            <summary>
            Gets the client which the status is on.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.ServerQuery.PropertyChanged">
            <summary>
            Raised when a property on the instance has changed.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ChannelBlockedMessage">
            <summary>
            The ErrorMessage received when attempting to join a channel which invite-only.
            </summary>
            <remarks>
            A channel can be set invite-only with a ChannelModeMessage containing a InviteOnlyMode.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelBlockedMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.ChannelBlockedMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelBlockedMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelBlockedMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelBlockedMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelBlockedMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelBlockedMessage.Channel">
            <summary>
            Gets or sets the channel which is blocked
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelBlockedMessage.Reason">
            <summary>
            Gets or sets the reason the channel is blocked
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.UserOnlineStatus">
            <summary>
            The enum of a user's online status.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.UserOnlineStatus.Online">
            <summary>
            The value indicating a user is online and available for chat
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.UserOnlineStatus.Away">
            <summary>
            The value indicating a user is online but away from his keyboard.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.UserOnlineStatus.Offline">
            <summary>
            The value indicatin a user is not connected to irc.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WhoIsMessage">
            <summary>
            Requests information from the server about the users specified.
            </summary>
            <remarks>
            <para>
            Possible reply messages include:
            <see cref="T:NoSuchServerMessage"/>
            <see cref="T:NoNickGivenMessage"/>
            <see cref="T:NoSuchNickMessage"/>
            
            <see cref="T:WhoIsUserReplyMessage"/>
            <see cref="T:WhoIsChannelsReplyMessage"/>
            <see cref="T:WhoIsServerReplyMessage"/>
            <see cref="T:WhoIsOperReplyMessage"/>
            <see cref="T:WhoIsIdleReplyMessage"/>
            
            <see cref="T:UserAwayMessage" />
            <see cref="T:WhoIsEndReplyMessage"/>
            </para>
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoIsMessage.Masks">
            <summary>
            Gets the collection of users that information is requested for.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoIsMessage.Server">
            <summary>
            Gets or sets the server which should return the information.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoIsMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.UnknownUserMode">
            <summary>
            A user mode sent in a <see cref="T:MetaBuilders.Irc.Messages.UserModeMessage"/> which is not known.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.UnknownUserMode.#ctor(MetaBuilders.Irc.Messages.ModeAction,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.UnknownUserMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/> and value.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.UnknownUserMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.AdminMessage">
            <summary>
            The <see cref="T:MetaBuilders.Irc.Messages.AdminMessage"/> is used to find the name of the administrator of the given server, or current server if <see cref="P:MetaBuilders.Irc.Messages.ServerQueryBase.Target"/> is empty.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AdminMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AdminMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.AdminMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WelcomeMessage">
            <summary>
            The WelcomeMessage is sent from a server to a client as the first message 
            once the client is registered.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WelcomeMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.WelcomeMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WelcomeMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WelcomeMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WelcomeMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WelcomeMessage.Text">
            <summary>
            The content of the welcome message.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WatchListEndReplyMessage">
            <summary>
            Signals the end of replies to a Watch system query.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchListEndReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.WatchListEndReplyMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchListEndReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchListEndReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchListEndReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WatchListEndReplyMessage.ListType">
            <summary>
            Gets or sets the type of the list which was sent.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.UserInfoReplyMessage">
            <summary>
            The reply for the <see cref="T:MetaBuilders.Irc.Messages.UserInfoRequestMessage"/> query.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserInfoReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.UserInfoReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserInfoReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserInfoReplyMessage.Parse(System.String)">
            <summary>
            Parses the given string to populate this <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.UserInfoReplyMessage.Response">
            <summary>
            The information that the client wants to return.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.UserInfoReplyMessage.ExtendedData">
            <summary>
            Gets the data payload of the Ctcp request.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.TimeRequestMessage">
            <summary>
            Sends a request for the current time on the target's machine.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TimeRequestMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.TimeRequestMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TimeRequestMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.SourceRequestMessage">
            <summary>
            A request to know where the target's client be downloaded from.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SourceRequestMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.SourceRequestMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SourceRequestMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.SourceReplyMessage">
            <summary>
            The reply to a <see cref="T:MetaBuilders.Irc.Messages.SourceRequestMessage"/>, 
            telling the requestor where to download this client.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SourceReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.SourceReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SourceReplyMessage.Parse(System.String)">
            <summary>
            Parses the given string to populate this <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SourceReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.SourceReplyMessage.Server">
            <summary>
            Gets or sets the server that hosts the client's distribution.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.SourceReplyMessage.Folder">
            <summary>
            Gets or sets the folder path to the client's distribution.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.SourceReplyMessage.Files">
            <summary>
            Gets the list of files that must be downloaded.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.SourceReplyMessage.ExtendedData">
            <summary>
            Gets the data payload of the Ctcp request.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.FingerReplyMessage">
            <summary>
            The reply to the <see cref="T:MetaBuilders.Irc.Messages.FingerRequestMessage"/>, containing the user's name and idle time.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.FingerReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.FingerReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.FingerReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.FingerReplyMessage.Parse(System.String)">
            <summary>
            Parses the given string to populate this <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.FingerReplyMessage.RealName">
            <summary>
            Gets or sets the real name of the user.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.FingerReplyMessage.LoginName">
            <summary>
            Gets or sets the login name of the user.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.FingerReplyMessage.IdleSeconds">
            <summary>
            Gets or sets the number of seconds that the user has been idle.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.FingerReplyMessage.ExtendedData">
            <summary>
            Gets the data payload of the Ctcp request.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.OperMessage">
            <summary>
            OperMessage is used by a normal user to obtain irc operator privileges.
            ( This does not refer to channel ops )
            The correct combination of <see cref="P:MetaBuilders.Irc.Messages.OperMessage.Name"/> and <see cref="P:MetaBuilders.Irc.Messages.OperMessage.Password"/> are required to gain Operator privileges.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.OperMessage.#ctor">
            <summary>
            Creates a new instance of the OperMessage class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.OperMessage.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the OperMessage class with the given name and password.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.OperMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.OperMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.OperMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.OperMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.OperMessage.Password">
            <summary>
            Gets or sets the password for the sender.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.OperMessage.Name">
            <summary>
            Gets or sets the name for the sender.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.OperatorMode">
            <summary>
            This mode is used to toggle the operator status of a channel member.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.MemberStatusMode">
            <summary>
            The modes in this category have a channel member nickname property, <see cref="P:MetaBuilders.Irc.Messages.Modes.MemberStatusMode.Nick"/> and affect the privileges given to this user.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.MemberStatusMode.AddParameter(MetaBuilders.Irc.Messages.ChannelModeMessage)">
            <summary>
            Applies this mode to the ModeArguments property of the given <see cref="T:MetaBuilders.Irc.Messages.ChannelModeMessage"/>.
            </summary>
            <param name="msg">The message which will be modified to include this mode.</param>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.MemberStatusMode.Nick">
            <summary>
            Gets or sets the nickname of the channel member who will be affected by this mode.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.OperatorMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.OperatorMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.OperatorMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.OperatorMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.OperatorMode.#ctor(MetaBuilders.Irc.Messages.ModeAction,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.OperatorMode"/> class 
            with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/> and member's nick.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.OperatorMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Dcc.DccTransfer">
            <summary>
            Handles the networks level communication protocols for sending and receiving files over dcc.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Dcc.DccTransfer.OnTransferInterruption(System.EventArgs)">
            <summary>
            Raises the <see cref="E:MetaBuilders.Irc.Dcc.DccTransfer.TransferInterruption"/> event.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Dcc.DccTransfer.OnTransferComplete(System.EventArgs)">
            <summary>
            Raises the <see cref="E:MetaBuilders.Irc.Dcc.DccTransfer.TransferComplete"/> event.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Dcc.DccTransfer.Send">
            <summary>
            Sends the file over the current socket.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Dcc.DccTransfer.Receive">
            <summary>
            Receives the file over the current socket.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Dcc.DccTransfer.File">
            <summary>
            Gets or sets a stream to the file being transfered.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Dcc.DccTransfer.StartPosition">
            <summary>
            Gets or sets the startposition in the file to transfer the information.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Dcc.DccTransfer.TransferSocket">
            <summary>
            Gets or sets the socket the file transfer will use.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Dcc.DccTransfer.BufferSize">
            <summary>
            Gets or sets the size of the buffer for transfer of the file.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Dcc.DccTransfer.TurboMode">
            <summary>
            Gets or sets if the transfer uses the "turbo" extension in increase transfer speed.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Dcc.DccTransfer.Secure">
            <summary>
            Gets or sets if the transfer uses SSL to secure the transfer.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Dcc.DccTransfer.SendAhead">
            <summary>
            Gets or sets if the transfer uses the "send ahead" extension to increase transfer speed.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Dcc.DccTransfer.BytesTransferred">
            <summary>
            Gets the number of bytes transfered so far.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Dcc.DccTransfer.FileSize">
            <summary>
            Gets or sets the size of the file being transfered.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Dcc.DccTransfer.TransferInterruption">
            <summary>
            The TransferInterruption event occurs when the file has not completely transfered, but the connection has been stopped.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Dcc.DccTransfer.TransferComplete">
            <summary>
            The TransferComplete event occurs when the file has been completely transfered.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.CannotChangeNickWhileBannedMessage">
            <summary>
            The ErrorMessage sent when a user tries to change his nick while on a channel in which he is banned.
            </summary>
            <remarks>
            This is error code is also defined as "Resource Unavailable", but this message variant is more common.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CannotChangeNickWhileBannedMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.TooManyLinesMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CannotChangeNickWhileBannedMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CannotChangeNickWhileBannedMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CannotChangeNickWhileBannedMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CannotChangeNickWhileBannedMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.CannotChangeNickWhileBannedMessage.Channel">
            <summary>
            Gets or sets the channel in which the user is banned.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.AlreadyOnChannelMessage">
            <summary>
            The ErrorMessage sent when a user tries to invite a person onto a channel which they
            are already on
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AlreadyOnChannelMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.AlreadyOnChannelMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AlreadyOnChannelMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AlreadyOnChannelMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AlreadyOnChannelMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AlreadyOnChannelMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.AlreadyOnChannelMessage.Nick">
            <summary>
            Gets or sets the nick of the user invited
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.AlreadyOnChannelMessage.Channel">
            <summary>
            Gets or sets the channel being invited to
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.UniqueIdMessage">
            <summary>
            This message is sent by the server early during connection, and tells the user the alpha-numeric id the server uses to identify the user.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UniqueIdMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.UniqueIdMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UniqueIdMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UniqueIdMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UniqueIdMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.UniqueIdMessage.UniqueId">
            <summary>
            Gets or sets the alpha-numeric id the server uses to identify the client.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.MonitorAddUsersMessage">
            <summary>
            A Monitor system message that adds users to your monitor list.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitorAddUsersMessage.CanParse(System.String)">
            <summary>
            Determines if the message can be parsed by this type.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitorAddUsersMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitorAddUsersMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitorAddUsersMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.MonitorAddUsersMessage.Nicks">
            <summary>
            Gets the collection of nicks being added to the monitor list.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.AcceptListRequestMessage">
            <summary>
            A CallerId/Accept system message that requests the nicks of the users on your accept list.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AcceptListRequestMessage.Validate(MetaBuilders.Irc.ServerSupport)">
            <summary>
            Validates this message against the given server support
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AcceptListRequestMessage.CanParse(System.String)">
            <summary>
            Determines if the message can be parsed by this type.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AcceptListRequestMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AcceptListRequestMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.AcceptListRequestMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.AcceptListEditorMessage">
            <summary>
            A Message that edits the list of users on your accept list.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AcceptListEditorMessage.Validate(MetaBuilders.Irc.ServerSupport)">
            <summary>
            Validates this message against the given server support
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AcceptListEditorMessage.CanParse(System.String)">
            <summary>
            Determines if the message can be parsed by this type.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AcceptListEditorMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AcceptListEditorMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AcceptListEditorMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.AcceptListEditorMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.AcceptListEditorMessage.AddedNicks">
            <summary>
            Gets the collection of nicks being added to the accept list.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.AcceptListEditorMessage.RemovedNicks">
            <summary>
            Gets the collection of nicks being removed from the accept list.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.StatsMessage">
            <summary>
            A request for some information about the server.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.StatsMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.StatsMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.StatsMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.StatsMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.StatsMessage.Query">
            <summary>
            Gets or sets the code the what information is requested.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.StatsMessage.TargetParsingPosition">
            <summary>
            Gets the index of the parameter which holds the server which should respond to the query.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.LusersMessage">
            <summary>
            Requests that the server send information about the size of the IRC network.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LusersMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LusersMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.LusersMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.LusersMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.LusersMessage.Mask">
            <summary>
            Gets or sets the mask that limits the servers which information will be returned.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.LusersMessage.TargetParsingPosition">
            <summary>
            Gets the index of the parameter which holds the server which should respond to the query.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.SilenceReplyMessage">
            <summary>
            The reply to the <see cref="T:MetaBuilders.Irc.Messages.SilenceMessage"/> query.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SilenceReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.SilenceReplyMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SilenceReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SilenceReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SilenceReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.SilenceReplyMessage.SilencedUser">
            <summary>
            Gets or sets the user being silenced.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.SilenceReplyMessage.SilenceListOwner">
            <summary>
            Gets or sets the nick of the owner of the silence list
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.SilenceEndReplyMessage">
            <summary>
            Marks the end of the replies to the <see cref="T:MetaBuilders.Irc.Messages.SilenceMessage"/> query.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SilenceEndReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.SilenceEndReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SilenceEndReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SilenceEndReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.NickInUseMessage">
            <summary>
            Returned when a <see cref="T:MetaBuilders.Irc.Messages.NickChangeMessage"/> is processed that results in an attempt to change to a currently existing nickname. 
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NickInUseMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.NickInUseMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NickInUseMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NickInUseMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NickInUseMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.NickInUseMessage.Nick">
            <summary>
            Gets or sets the nick which was already taken.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.VoiceMode">
            <summary>
            This mode is used to give and take voice privilege to/from a channel member. 
            Users with this privilege can talk on moderated channels. (<see cref="T:MetaBuilders.Irc.Messages.Modes.ModeratedMode"/>)
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.VoiceMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.VoiceMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.VoiceMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.VoiceMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.VoiceMode.#ctor(MetaBuilders.Irc.Messages.ModeAction,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.VoiceMode"/> class 
            with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/> and member's nick.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.VoiceMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.MessageParserService">
            <summary>
            Provides clients with a correct <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> for a given raw message string
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageParserService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MetaBuilders.Irc.Messages.MessageParserService"/> class.
            </summary>
            <remarks>
            This is private because this class is a Singleton.
            Use the <see cref="F:MetaBuilders.Irc.Messages.MessageParserService.Service"/> to get the only instance of this class.
            </remarks>
        </member>
        <member name="F:MetaBuilders.Irc.Messages.MessageParserService.Service">
            <summary>
            Provides access to clients to lone instance of the <see cref="T:MetaBuilders.Irc.Messages.MessageParserService"/>.
            </summary>
            <returns>The Singleton-patterned service.</returns>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageParserService.AddCustomMessage(MetaBuilders.Irc.Messages.IrcMessage)">
            <summary>
            Adds a custom message to consider for parsing raw messages recevied from the server.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageParserService.Parse(System.String)">
            <summary>
            Parses the given string into an <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/>.
            </summary>
            <param name="unparsedMessage">The string to parse.</param>
            <returns>An <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> which represents the given string.</returns>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MessageParserService.DetermineMessage(System.String)">
            <summary>
            Determines and instantiates the correct subclass of <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> for the given given string.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Dcc.DccUtil">
            <summary>
            Holds a few utilities for dcc message parsing.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Dcc.DccUtil.#ctor">
            <summary>
            Do not use under penalty of death
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Dcc.DccUtil.GetCommand(System.String)">
            <summary>
            Gets the Dcc Command of the message, such as CHAT or SEND.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Dcc.DccUtil.GetArgument(System.String)">
            <summary>
            Gets the Dcc Argument of the message, such as the filename of a SEND.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Dcc.DccUtil.GetAddress(System.String)">
            <summary>
            Gets the address of the connection instantiator in Int64 format as a String.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Dcc.DccUtil.GetPort(System.String)">
            <summary>
            Gets the port of the connection instantiator.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Dcc.DccUtil.GetParameters(System.String)">
            <summary>
            Gets the inner parameters of a dcc data area.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.DccAcceptRequestMessage">
            <summary>
            This message is an acknowledgement to resume sending a file previously, but not completely sent to the requestor.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.DccAcceptRequestMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.DccAcceptRequestMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.DccAcceptRequestMessage.CanParse(System.String)">
            <summary>
            Determines if the message can be parsed by this type.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.DccAcceptRequestMessage.CanParseDccCommand(System.String)">
            <summary>
            Determines if the message
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.DccAcceptRequestMessage.Parse(System.String)">
            <summary>
            Parses the given string to populate this <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.DccAcceptRequestMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.DccAcceptRequestMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.DccAcceptRequestMessage.ExtendedData">
            <summary>
            Gets the data payload of the Ctcp request.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.DccAcceptRequestMessage.DccCommand">
            <summary>
            Gets the dcc sub-command.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.DccAcceptRequestMessage.FileName">
            <summary>
            Gets or sets the name of the file being sent.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.DccAcceptRequestMessage.Port">
            <summary>
            Gets or sets the port the connection should be on.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.DccAcceptRequestMessage.Position">
            <summary>
            Gets or sets the position in the file at which to resume sending.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Client">
            <summary>
            Represents an irc client. it has a connection, a user, etc
            </summary>
            <remarks>A gui frontend should use one instance of these per client/server <see cref="T:MetaBuilders.Irc.Network.ClientConnection"/> it wants to make.</remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Client.#ctor">
            <summary>Initializes a new instance of the <see cref="T:MetaBuilders.Irc.Client"/> class.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Client.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MetaBuilders.Irc.Client"/> with the given address.
            </summary>
            <param name="address">The address that will be connected to.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Client.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MetaBuilders.Irc.Client"/> with the given address.
            </summary>
            <param name="address">The address that will be connected to.</param>
            <param name="nick">The nick of the <see cref="P:MetaBuilders.Irc.Client.User"/></param>
        </member>
        <member name="M:MetaBuilders.Irc.Client.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MetaBuilders.Irc.Client"/> with the given address.
            </summary>
            <param name="address">The address that will be connected to.</param>
            <param name="nick">The <see cref="P:MetaBuilders.Irc.User.Nick"/> of the <see cref="P:MetaBuilders.Irc.Client.User"/></param>
            <param name="realName">The <see cref="P:MetaBuilders.Irc.User.RealName"/> of the <see cref="P:MetaBuilders.Irc.Client.User"/></param>
        </member>
        <member name="M:MetaBuilders.Irc.Client.Send(MetaBuilders.Irc.Messages.IrcMessage)">
            <summary>
            Sends a <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> over a <see cref="T:MetaBuilders.Irc.Network.ClientConnection"/> to an irc server.
            </summary>
            <param name="message">The <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> to send.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Client.SendChat(System.String,System.String)">
            <summary>
            Sends a <see cref="T:MetaBuilders.Irc.Messages.ChatMessage"/> with the given text to the given channel or user.
            </summary>
            <param name="text">The text of the message.</param>
            <param name="target">The target of the message, either a channel or nick.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Client.SendAction(System.String,System.String)">
            <summary>
            Sends a <see cref="T:MetaBuilders.Irc.Messages.ActionRequestMessage"/> with the given text to the given  channel or user.
            </summary>
            <param name="text">The text of the action.</param>
            <param name="target">The target of the message, either a channel or nick.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Client.SendJoin(System.String)">
            <summary>
            Sends a <see cref="T:MetaBuilders.Irc.Messages.JoinMessage"/> for the given channel.
            </summary>
            <param name="channel">The channel to join.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Client.SendPart(System.String)">
            <summary>
            Sends a <see cref="T:MetaBuilders.Irc.Messages.PartMessage"/> for the given channel. 
            </summary>
            <param name="channel">The channel to part.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Client.SendAway(System.String)">
            <summary>
            Sends an <see cref="T:MetaBuilders.Irc.Messages.AwayMessage"/> with the given reason.
            </summary>
            <param name="reason">The reason for being away.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Client.SendBack">
            <summary>
            Sends a <see cref="T:MetaBuilders.Irc.Messages.BackMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Client.SendQuit">
            <summary>
            Sends a <see cref="T:MetaBuilders.Irc.Messages.QuitMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Client.SendQuit(System.String)">
            <summary>
            Sends a <see cref="T:MetaBuilders.Irc.Messages.QuitMessage"/> with the given reason.
            </summary>
            <param name="reason">The reason for quitting.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Client.IsMessageFromServer(MetaBuilders.Irc.Messages.IrcMessage)">
            <summary>
            Determines if the given message originated from the currently connected server.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Client.Dispose(System.Boolean)">
            <summary>
            Releases the disposable resources used
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Client.Finalize">
            <summary>
            Client destructor
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Client.OnMessageParsed(MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.IrcMessage})">
            <summary>Raises the MessageParsed event.</summary>
        </member>
        <member name="M:MetaBuilders.Irc.Client.OnMessageSending(MetaBuilders.Irc.Messages.CancelIrcMessageEventArgs{MetaBuilders.Irc.Messages.IrcMessage})">
            <summary>
            Raises the MessageSending event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MetaBuilders.Irc.Client.dataReceived(System.Object,MetaBuilders.Irc.Network.ConnectionDataEventArgs)">
            <summary>
            Transforms <see cref="T:MetaBuilders.Irc.Network.ClientConnection"/> data into raised <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> events
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Client.autoPingPong(System.Object,MetaBuilders.Irc.Messages.IrcMessageEventArgs{MetaBuilders.Irc.Messages.PingMessage})">
            <summary>
            Keeps an irc connection alive.
            </summary>
            <remarks>
            An irc server will ping you every x seconds to make sure you are still alive.
            This method will auto-pong a return to keep the <see cref="T:MetaBuilders.Irc.Network.ClientConnection"/> alive automagically.
            </remarks>
            <param name="sender">the connection object sending the ping</param>
            <param name="e">the message sent</param>
        </member>
        <member name="P:MetaBuilders.Irc.Client.Messages">
            <summary>
            Gets the conduit thru which individual message received events can be attached.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Client.DefaultQuitMessage">
            <summary>
            Gets or sets the default quit message if the client 
            has to close the connection itself.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Client.EnableAutoIdent">
            <summary>
            Gets or sets whether the <see cref="T:MetaBuilders.Irc.Client"/> will automaticly start and stop
            an <see cref="T:MetaBuilders.Irc.Network.Ident"/> service as needed to connect to the irc server.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Client.Connection">
            <summary>
            Gets the <see cref="T:MetaBuilders.Irc.Network.ClientConnection"/> of the current <see cref="T:MetaBuilders.Irc.Client"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Client.User">
            <summary>
            Gets or sets the <see cref="P:MetaBuilders.Irc.Client.User"/> of the current <see cref="T:MetaBuilders.Irc.Client"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Client.ServerName">
            <summary>
            Gets the name of the server that you are connected to.
            </summary>
            <remarks>
            This is the name that server referes to itself by in messages, not neccesarily the name you use to connect.
            </remarks>
        </member>
        <member name="P:MetaBuilders.Irc.Client.ServerSupports">
            <summary>
            Gets a <see cref="T:MetaBuilders.Irc.ServerSupport"/> object containing knowledge about what the current server supports.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Client.ServerQuery">
            <summary>
            Gets the query window to the server to which this client is connected
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Client.Channels">
            <summary>
            Gets the collection of channels which the user has joined
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Client.Queries">
            <summary>
            Gets the collection of queries the user is enganged in
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Client.Peers">
            <summary>
            Gets the collection users which the user has seen
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Client.Contacts">
            <summary>
            Gets the <see cref="T:MetaBuilders.Irc.Contacts.ContactList"/> for this client.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Client.DataReceived">
            <summary>
            Occurs when the <see cref="T:MetaBuilders.Irc.Network.ClientConnection"/> recieves data.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Client.DataSent">
            <summary>
            Occurs when the <see cref="T:MetaBuilders.Irc.Network.ClientConnection"/> sends data.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Client.MessageParsed">
            <summary>
            Occurs when any message is received and parsed.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Client.Ready">
            <summary>
            Occurs when the connection is opened and the server has sent a welcome message.
            </summary>
            <remarks>
            This is the earliest the messages can be sent over the irc nextwork
            </remarks>
        </member>
        <member name="E:MetaBuilders.Irc.Client.MessageSending">
            <summary>
            Occurs when any message is about to be sent.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.IdentChangedMessage">
            <summary>
            The ErrorMessage sent when a user tries to connect with an ident containing invalid characters
            </summary>
            <remarks>
            Not all networks will send this message, some will silently change your ident,
            while others will simply disconnect you.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IdentChangedMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.IdentChangedMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IdentChangedMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IdentChangedMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IdentChangedMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.IdentChangedMessage.Ident">
            <summary>
            Gets or sets the ident that was attempted
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.IdentChangedMessage.InvalidCharacters">
            <summary>
            Gets or sets the characters in the attempted ident which were invalid
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.IdentChangedMessage.NewIdent">
            <summary>
            Gets or sets the new ident being assigned
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WhoIsRegisteredNickReplyMessage">
            <summary>
            One of the possible replies to a <see cref="T:MetaBuilders.Irc.Messages.WhoIsMessage"/> message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsRegisteredNickReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.WhoIsRegisteredNickReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsRegisteredNickReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsRegisteredNickReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsRegisteredNickReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoIsRegisteredNickReplyMessage.Nick">
            <summary>
            Gets or sets the nick for the user examined.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.ReceiveConnectionNoticesMode">
            <summary>
            This mode signifies that the user will receive client connection notices.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ReceiveConnectionNoticesMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.ReceiveConnectionNoticesMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ReceiveConnectionNoticesMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.ReceiveConnectionNoticesMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.ReceiveConnectionNoticesMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.InfoMessage">
            <summary>
            The <see cref="T:MetaBuilders.Irc.Messages.InfoMessage"/> requests information which describes the server;
            its version, when it was compiled, the patchlevel, when it was started, 
            and any other miscellaneous information which may be considered to be relevant.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.InfoMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.InfoMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.InfoMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WhoEndReplyMessage">
            <summary>
            Signals the end of the <see cref="T:MetaBuilders.Irc.Messages.WhoReplyMessage"/> list.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoEndReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.WhoEndReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoEndReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoEndReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoEndReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoEndReplyMessage.Nick">
            <summary>
            Gets or sets the nick of the user in the Who reply list.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.SupportMessage">
            <summary>
            This is a message sent from a server to a client upon connection 
            to tell the client what irc features the server supports.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SupportMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.SupportMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SupportMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SupportMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SupportMessage.CanParse(System.String)">
            <summary>
            Determines if the message can be parsed by this type.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SupportMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.SupportMessage.SupportedItems">
            <summary>
            Gets the list of items supported by the server.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ServerCreatedMessage">
            <summary>
            This message is sent from the server after connection,
            and contains information about the creation of the server.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ServerCreatedMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ServerCreatedMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ServerCreatedMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ServerCreatedMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ServerCreatedMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ServerCreatedMessage.CreatedDate">
            <summary>
            Gets or sets the date on which the server was created.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.PrioritizedMessageList">
            <summary>
            A list which contains IrcMessages.
            </summary>
            <remarks>
            Call <see cref="m:Prioritize"/> on frequently accessed nodes in order to make
            finding common messages faster.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.PrioritizedMessageList.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.PrioritizedMessageList"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.PrioritizedMessageList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.PrioritizedMessageList"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.PrioritizedMessageList.Prioritize(System.Collections.Generic.LinkedListNode{MetaBuilders.Irc.Messages.IrcMessage})">
            <summary>
            Moves the given <see cref="T:System.Collections.Generic.LinkedListNode`1"/> to the front of an enumeration of the set.
            </summary>
            <param name="node">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/> to prioritize</param>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.KnockReplyMessage">
            <summary>
            A reply to a <see cref="T:MetaBuilders.Irc.Messages.KnockMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.KnockReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.KnockReplyMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.KnockReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.KnockReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.KnockReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.KnockReplyMessage.Channel">
            <summary>
            Gets or sets the channel that was knocked on.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.VersionRequestMessage">
            <summary>
            Sends a request for the version of the target's client code.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.VersionRequestMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.VersionRequestMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.VersionRequestMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.NickChangeMessage">
            <summary>
            NickChangeMessage is used to give a user a nickname or change the previous one. 
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NickChangeMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.NickChangeMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NickChangeMessage.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.NickChangeMessage"/> class with the given nick.
            </summary>
            <param name="newNick"></param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NickChangeMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NickChangeMessage.Parse(System.String)">
            <summary>
            Parses the given string to populate this <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NickChangeMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NickChangeMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.NickChangeMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.NickChangeMessage.NewNick">
            <summary>
            Gets or sets the nick requested by the sender.
            </summary>
            <remarks>
            Some servers limit you to 9 characters in you nick, while others allow more.
            Some servers will send a <see cref="T:MetaBuilders.Irc.Messages.SupportMessage"/> telling you the maximum nick length allowed.
            </remarks>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.HalfOpMode">
            <summary>
            This mode is used to toggle the half-operator status of a channel member.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.HalfOpMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.HalfOpMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.HalfOpMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.HalfOpMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.HalfOpMode.#ctor(MetaBuilders.Irc.Messages.ModeAction,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.HalfOpMode"/> class 
            with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/> and member's nick.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.HalfOpMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.BanExceptionMode">
            <summary>
            This mode defines an exception for any <see cref="T:MetaBuilders.Irc.Messages.Modes.BanMode"/> masks set for the channel.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.BanExceptionMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.BanExceptionMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.BanExceptionMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.BanExceptionMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.BanExceptionMode.#ctor(MetaBuilders.Irc.Messages.ModeAction,MetaBuilders.Irc.User)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.BanExceptionMode"/> class 
            with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/> and <see cref="T:MetaBuilders.Irc.User"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.BanExceptionMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.IrcMessageWriter">
            <summary>
            Writes <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> data to a <see cref="T:System.IO.TextWriter"/> in irc protocol format.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IrcMessageWriter.#ctor">
            <summary>
            Creates a new instance of the IrcMessageWriter class without an <see cref="P:MetaBuilders.Irc.Messages.IrcMessageWriter.InnerWriter"/> to write to.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IrcMessageWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Creates a new instance of the IrcMessageWriter class with the given <see cref="P:MetaBuilders.Irc.Messages.IrcMessageWriter.InnerWriter"/> to write to.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IrcMessageWriter.AddParameter(System.String,System.Boolean)">
            <summary>
            Adds the given possibly-splittable parameter to the writer.
            </summary>
            <param name="value">The parameter to add to the writer</param>
            <param name="splittable">Indicates if the parameter can be split across messages written.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IrcMessageWriter.AddParameter(System.String)">
            <summary>
            Adds the given non-splittable parameter to the writer.
            </summary>
            <param name="value">The parameter to add to the writer</param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IrcMessageWriter.AddList(System.Collections.IList,System.String,System.Boolean)">
            <summary>
            Adds a possibly-splittable list of parameters to the writer.
            </summary>
            <param name="value">The list of parameters to add</param>
            <param name="separator">The seperator to write between values in the list</param>
            <param name="splittable">Indicates if the parameters can be split across messages written.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IrcMessageWriter.AddList(System.Collections.IList,System.String)">
            <summary>
            Adds a splittable list of parameters to the writer.
            </summary>
            <param name="value">The list of parameters to add</param>
            <param name="separator">The seperator to write between values in the list</param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IrcMessageWriter.Write">
            <summary>
            Writes the current message data to the inner writer in irc protocol format.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IrcMessageWriter.Dispose">
            <summary>
            Implements IDisposable.Dispose
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IrcMessageWriter.Finalize">
            <summary>
            The IrcMessageWriter destructor
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.IrcMessageWriter.InnerWriter">
            <summary>
            Gets or sets the <see cref="T:System.IO.TextWriter"/> which will written to.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.IrcMessageWriter.Sender">
            <summary>
            Gets or sets the ID of the sender of the message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.IrcMessageWriter.AppendNewLine">
            <summary>
            Gets or sets if a new line is appended to the end of messages when they are written.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Network.Ident">
            <summary>
            An Ident daemon which is still used by some
            IRC networks for authentication.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Network.Ident.Service">
            <summary>
            The singleton Ident service.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Network.Ident.Start">
            <summary>
            Starts the Ident server.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Network.Ident.Start(System.Boolean)">
            <summary>
            Starts the Ident server.
            </summary>
            <param name="stopAfterFirstAnswer">If true, Ident will stop immediately after answering. If false, will continue until <see cref="M:MetaBuilders.Irc.Network.Ident.Stop"/> is called.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Network.Ident.Stop">
            <summary>
            Stops the Ident server.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Network.Ident.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by <see cref="T:MetaBuilders.Irc.Network.Ident"/>
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Network.Ident.User">
            <summary>
            Gets or sets the <see cref="T:MetaBuilders.Irc.User"/> to respond to an ident request with.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Network.Ident.Status">
            <summary>
            Gets the status of the Ident service.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.TargetChangeTooFastMessage">
            <summary>
            The ErrorMessage sent when a user tries to send commands to too many targets in a short amount of time.
            </summary>
            <remarks>
            The purpose of this error condition is to help stop spammers.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TargetChangeTooFastMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.TargetChangeTooFastMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TargetChangeTooFastMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TargetChangeTooFastMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TargetChangeTooFastMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TargetChangeTooFastMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.TargetChangeTooFastMessage.TargetChanged">
            <summary>
            Gets or sets the nick or channel which was attempted
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.TargetChangeTooFastMessage.Seconds">
            <summary>
            Gets or sets the number of seconds which must be waited before attempting again.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.ChannelStatus">
            <summary>
            The nick prefixes that represent user level status in a channel.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.ChannelStatus.Operator">
            <summary>
            Gets the <see cref="T:MetaBuilders.Irc.ChannelStatus"/> representing the operator status level.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.ChannelStatus.HalfOperator">
            <summary>
            Gets the <see cref="T:MetaBuilders.Irc.ChannelStatus"/> representing the half-operator status level.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.ChannelStatus.Voice">
            <summary>
            Gets the <see cref="T:MetaBuilders.Irc.ChannelStatus"/> representing the voiced status level.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.ChannelStatus.None">
            <summary>
            Gets the <see cref="T:MetaBuilders.Irc.ChannelStatus"/> representing the no special status level.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.ChannelStatus.GetInstance(System.String)">
            <summary>
            Gets a ChannelStatus instance with the given symbol.
            </summary>
            <remarks>
            If the given status is not defined already, a new status is created.
            This same new status is used for all future calls to GetInstance.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.ChannelStatus.IsDefined(MetaBuilders.Irc.ChannelStatus)">
            <summary>
            Determines if the given ChannelStatus is one of the defined ChannelStatuses.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.ChannelStatus.Exists(System.String)">
            <summary>
            Determines if the given symbol is any of the known channel statuses.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.ChannelStatus.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.ChannelStatus"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.ChannelStatus.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.ChannelStatus"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.ChannelStatus.ToString">
            <summary>
            Creates a representation of the message in irc format.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.ChannelStatus.Equals(System.Object)">
            <summary>
            Determines if the given ChannelStatus is equal to this one.
            </summary>
            <remarks>This equality is determined by equality of the Symbol property.</remarks>
        </member>
        <member name="M:MetaBuilders.Irc.ChannelStatus.GetHashCode">
            <summary>
            Implements GetHashCode using the Symbol property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MetaBuilders.Irc.ChannelStatus.op_Equality(MetaBuilders.Irc.ChannelStatus,MetaBuilders.Irc.ChannelStatus)">
            <summary>
            Implements the operator based on the Symbol property.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.ChannelStatus.op_Inequality(MetaBuilders.Irc.ChannelStatus,MetaBuilders.Irc.ChannelStatus)">
            <summary>
            Implements the operator based on the Symbol property.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.ChannelStatus.op_LessThan(MetaBuilders.Irc.ChannelStatus,MetaBuilders.Irc.ChannelStatus)">
            <summary>
            Implements the operator based on the Symbol property.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.ChannelStatus.op_GreaterThan(MetaBuilders.Irc.ChannelStatus,MetaBuilders.Irc.ChannelStatus)">
            <summary>
            Implements the operator based on the Symbol property.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.ChannelStatus.CompareTo(System.Object)">
            <summary>
            Implements <see cref="M:System.IComparable.CompareTo(System.Object)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.ChannelStatus.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements ISerializable.GetObjectData
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ChannelStatus.Values">
            <summary>
            Gets a collection of <see cref="T:MetaBuilders.Irc.ChannelStatus"/> instances representing all built statuses.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.ChannelStatus.Symbol">
            <summary>
            Gets the string representation of the status.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Contacts.ContactList">
            <summary>
            A contact list which tracks the online and offline status of the users within the Users collection property.
            </summary>
            <remarks>
            The ContactList will use Watch, Monitor, or IsOn, depending on server support. User status changes 
            will be updated via the User.OnlineStatus property.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Contacts.ContactList.Initialize(MetaBuilders.Irc.Client)">
            <summary>
            Initializes the ContactList on the given client.
            </summary>
            <remarks>
            This method should not be called until the Client receives the ServerSupport is populated.
            An easy way to make sure is to wait until the Ready event of the Client.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Contacts.ContactList.Dispose">
            <summary>
            Implements IDisposable.Dispose
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Contacts.ContactList.Dispose(System.Boolean)">
            <summary>
            Implements IDisposable.Dispose
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Contacts.ContactList.Finalize">
            <exclude />
        </member>
        <member name="P:MetaBuilders.Irc.Contacts.ContactList.Users">
            <summary>
            Gets the collection of users being tracked as a contact list.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Contacts.ContactList.Client">
            <summary>
            The client on which the list is tracked.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.TraceMessage">
            <summary>
            Request a network path from the local server to the specified server.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TraceMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TraceMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.TraceMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.TimeMessage">
            <summary>
            A request for the current server time.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TimeMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TimeMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.TimeMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.MotdMessage">
            <summary>
            Requests that the server send its Message Of The Day to the client.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MotdMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MotdMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.MotdMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WhoReplyMessage">
            <summary>
            A reply to a <see cref="T:MetaBuilders.Irc.Messages.WhoMessage"/> query.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.WhoReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoReplyMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoReplyMessage.Channel">
            <summary>
            Gets or sets the channel associated with the user.
            </summary>
            <remarks>
            In the case of a non-channel based WhoMessage, 
            Channel will contain the most recent channel which the user joined and is still on.
            </remarks>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoReplyMessage.User">
            <summary>
            Gets or sets the user being examined.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoReplyMessage.Status">
            <summary>
            Gets or sets the status of the user on the associated channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoReplyMessage.Server">
            <summary>
            Gets or sets the server the user is on.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoReplyMessage.HopCount">
            <summary>
            Gets or sets the number of hops to the server the user is on.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoReplyMessage.IsOper">
            <summary>
            Gets or sets if the user is an irc operator.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WhoIsIdleReplyMessage">
            <summary>
            As a reply to the <see cref="T:MetaBuilders.Irc.Messages.WhoIsMessage"/> message,
            carries information about idle time and such.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsIdleReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.WhoIsIdleReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsIdleReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsIdleReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsIdleReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoIsIdleReplyMessage.Nick">
            <summary>
            Gets or sets the nick of the user who is being examined.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoIsIdleReplyMessage.IdleLength">
            <summary>
            Gets or sets the number of seconds the user has been idle.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoIsIdleReplyMessage.SignOnTime">
            <summary>
            Gets or sets the time the user signed on to their current server.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoIsIdleReplyMessage.Info">
            <summary>
            Gets or sets some additional info about the user being examined.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.UserAwayMessage">
            <summary>
            The message is received by a client from a server 
            when they attempt to send a message to a user who
            is marked as away using the <see cref="T:MetaBuilders.Irc.Messages.AwayMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserAwayMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.UserAwayMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserAwayMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserAwayMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserAwayMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.UserAwayMessage.Text">
            <summary>
            Gets or sets the user's away message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.UserAwayMessage.Nick">
            <summary>
            Gets or sets the nick of the user who is away.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WatchedUserNowOfflineMessage">
            <summary>
            A Watch system notification that a user is now offline.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WatchedUserOfflineMessage">
            <summary>
            A Watch system notification that a watched user is offline
            </summary>
            <remarks>
            This message may either be a WatchedUserIsOfflineMessage or a WatchedUserNowOfflineMessage.
            Both messages have the same api and have the same impact for any watch tracking component,
            but are replies sent in reponse to different commands.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchedUserOfflineMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchedUserNowOfflineMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.WatchedUserNowOfflineMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WatchedUserNowOfflineMessage.ChangeMessage">
            <exclude />
        </member>
        <member name="T:MetaBuilders.Irc.Messages.YouAreBannedMessage">
            <summary>
            Returned after an attempt to connect and register yourself with a server which has been setup to explicitly deny connections to you.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.YouAreBannedMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.YouAreBannedMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.YouAreBannedMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.YouAreBannedMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.KnockMessage">
            <summary>
            With the KnockMessage, clients can request an invite to a invitation-only channel.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.KnockMessage.#ctor">
            <summary>
            Creates a new instance of the KnockMessage class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.KnockMessage.Validate(MetaBuilders.Irc.ServerSupport)">
            <summary>
            Validates this message's properties according to the given <see cref="T:MetaBuilders.Irc.ServerSupport"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.KnockMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.KnockMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.KnockMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.KnockMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.KnockMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.KnockMessage.Channel">
            <summary>
            Gets or sets the channel being targeted.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.ServerReopMode">
            <summary>
            This mode is only available on channels which name begins with the character '!' 
            and may only be toggled by the "channel creator". 
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ServerReopMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.ServerReopMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ServerReopMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.ServerReopMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.ServerReopMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ChannelIsInviteOnlyMessage">
            <summary>
            The ErrorMessage received when attempting to join a channel which invite-only.
            </summary>
            <remarks>
            A channel can be set invite-only with a ChannelModeMessage containing a InviteOnlyMode.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelIsInviteOnlyMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.ChannelIsInviteOnlyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelIsInviteOnlyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelIsInviteOnlyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelIsInviteOnlyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelIsInviteOnlyMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelIsInviteOnlyMessage.Channel">
            <summary>
            Gets or sets the channel which is invite-only
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WatchStatusNicksReplyMessage">
            <summary>
            A reply for the <see cref="T:MetaBuilders.Irc.Messages.WatchListRequestMessage"/> query stating the users on your watch list.
            </summary>
            <remarks>
            You may receive more than 1 of these in response to the request.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchStatusNicksReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.WatchStatusNicksReplyMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchStatusNicksReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchStatusNicksReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchStatusNicksReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WatchStatusNicksReplyMessage.Nicks">
            <summary>
            Gets the collection of nicks of the users on the watch list.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.MonitorListEndReplyMessage">
            <summary>
            A Monitor system message signaling the end of a monitor list request.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitorListEndReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.MonitorListReplyMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitorListEndReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see href="IrcMessage.AddParametersToFormat" />.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitorListEndReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.RestrictedMode">
            <summary>
            This mode signifies that the user has a restricted connection.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.RestrictedMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.RestrictedMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.RestrictedMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.RestrictedMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.RestrictedMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.NoticeMessage">
            <summary>
            This message is similar to a <see cref="T:MetaBuilders.Irc.Messages.ChatMessage"/>, 
            except that no auto-replies should ever be sent after receiving a <see cref="T:MetaBuilders.Irc.Messages.NoticeMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoticeMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.NoticeMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoticeMessage.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.NoticeMessage"/> class with the given text string.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoticeMessage.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.NoticeMessage"/> class with the given text string and target channel or user.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoticeMessage.#ctor(System.String,System.String[])">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.NoticeMessage"/> class with the given text string and target channels or users.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoticeMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.NoticeMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ChannelScopedChatMessage">
            <summary>
            This message is a chat message which is scoped to the current channel.
            </summary>
            <remarks>
            This is a non-standard message.
            This command exists because many servers limit the number of standard chat messages
            you can send in a time frame. However, they will let channel operators send this chat message
            as often as they want to people who are in that channel.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelScopedChatMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ChannelScopedChatMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelScopedChatMessage.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ChannelScopedChatMessage"/> class with the given text string.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelScopedChatMessage.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ChannelScopedChatMessage"/> class with the given text string and target channel or user.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelScopedChatMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelScopedChatMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelScopedChatMessage.Validate(MetaBuilders.Irc.ServerSupport)">
            <summary>
            Validates this message against the given server support
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelScopedChatMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelScopedChatMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelScopedChatMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelScopedChatMessage.Text">
            <summary>
            Gets or sets the actual text of this message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelScopedChatMessage.Target">
            <summary>
            Gets or sets the target of this message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelScopedChatMessage.Channel">
            <summary>
            Gets or sets the channel which this message is scoped to.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.TopicSetReplyMessage">
            <summary>
            The reply sent when the server acknowledges that a channel's topic has been changed.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TopicSetReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.TopicSetReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TopicSetReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TopicSetReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TopicSetReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TopicSetReplyMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.TopicSetReplyMessage.Channel">
            <summary>
            Gets or sets the channel with the changed topic.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.TopicSetReplyMessage.User">
            <summary>
            Gets or sets the user which changed the topic.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.TopicSetReplyMessage.TimeSet">
            <summary>
            Gets or sets the time at which the topic was changed.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ListEndReplyMessage">
            <summary>
            Marks the end of the replies to the <see cref="T:MetaBuilders.Irc.Messages.ListMessage"/> query.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ListEndReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ListEndReplyMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ListEndReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ListEndReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.IsOnReplyMessage">
            <summary>
            The server reply to an <see cref="T:MetaBuilders.Irc.Messages.IsOnMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IsOnReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.IsOnReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IsOnReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IsOnReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IsOnReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.IsOnReplyMessage.Nicks">
            <summary>
            Gets the list of nicks of people who are known to be online.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WatchListRequestMessage">
            <summary>
            A Watch system message that requests the list of nicks currently being watched.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchListRequestMessage.CanParse(System.String)">
            <summary>
            Determines if the message can be parsed by this type.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchListRequestMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Overrides <see href="IrcMessage.ParseParameters" />
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchListRequestMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchListRequestMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WatchListRequestMessage.OnlineOnly">
            <summary>
            Gets or sets if the message requests that only online contacts are in the list.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.SilenceMessage">
            <summary>
            With the SilenceMessage, clients can tell a server to never send messages to them from a given user. This, effectively, is a serverside ignore command.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SilenceMessage.#ctor">
            <summary>
            Creates a new instance of the SilenceMessage class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SilenceMessage.#ctor(System.String)">
            <summary>
            Creates a new instance of the SilenceMessage class with the given mask.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SilenceMessage.#ctor(MetaBuilders.Irc.User)">
            <summary>
            Creates a new instance of the SilenceMessage class with the <see cref="T:MetaBuilders.Irc.User"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SilenceMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SilenceMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.SilenceMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.SilenceMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.SilenceMessage.SilencedUser">
            <summary>
            Gets or sets the user being silenced.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.SilenceMessage.Action">
            <summary>
            Gets or sets the action being applied to the silenced user on the list.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.GenericCtcpReplyMessage">
            <summary>
            An unknown <see cref="T:MetaBuilders.Irc.Messages.CtcpReplyMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.GenericCtcpReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.GenericCtcpReplyMessage.Parse(System.String)">
            <summary>
            Parses the given string to populate this <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.GenericCtcpReplyMessage.DataPackage">
            <summary>
            Gets or sets the information packaged with the ctcp command.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.GenericCtcpReplyMessage.ExtendedData">
            <summary>
            Gets the data payload of the Ctcp request.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.GenericCtcpReplyMessage.Command">
            <summary>
            Gets or sets the Ctcp command.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.QuitMessage">
            <summary>
            A client session is ended with a QuitMessage.
            </summary>
            <remarks>
            The server must close the connection to a client which sends a QuitMessage.
            If a <see cref="P:MetaBuilders.Irc.Messages.QuitMessage.Reason"/> is given, this will be sent instead of the default message, the nickname.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.QuitMessage.#ctor">
            <summary>
            Creates a new instance of the QuitMessage class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.QuitMessage.#ctor(System.String)">
            <summary>
            Creates a new instance of the QuitMessage class with the given reason.
            </summary>
            <param name="reason"></param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.QuitMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.QuitMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.QuitMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.QuitMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.QuitMessage.Reason">
            <summary>
            Gets or sets the reason for quiting.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.CreatorMode">
            <summary>
            Servers use this mode to give the user creating a safe channel the status of "channel creator".
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.CreatorMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.CreatorMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.CreatorMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.CreatorMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.CreatorMode.#ctor(MetaBuilders.Irc.Messages.ModeAction,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.CreatorMode"/> class 
            with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/> and member's nick.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.CreatorMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.DccGetRequestMessage">
            <summary>
            Sends a request for the transfer of the given file.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.DccGetRequestMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.DccGetRequestMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.DccGetRequestMessage.CanParse(System.String)">
            <summary>
            Determines if the message can be parsed by this type.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.DccGetRequestMessage.CanParseDccCommand(System.String)">
            <summary>
            Determines if the message's DCC command is compatible with this message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.DccGetRequestMessage.Parse(System.String)">
            <summary>
            Parses the given string to populate this <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.DccGetRequestMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.DccGetRequestMessage.ExtendedData">
            <summary>
            Gets the data payload of the Ctcp request.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.DccGetRequestMessage.DccCommand">
            <summary>
            Gets the dcc sub-command.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.DccGetRequestMessage.FileName">
            <summary>
            Gets or sets the name of the file being requested.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.DccGetRequestMessage.TurboMode">
            <summary>
            Gets or sets if the dcc connection should use turbo mode.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.DccGetRequestMessage.Secure">
            <summary>
            Gets or sets if the dcc connection should use SSL.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Query">
            <summary>
            Represents a query window for private chat with one User
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Query.#ctor(MetaBuilders.Irc.Client,MetaBuilders.Irc.User)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Query"/> class on the given client with the given User.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Query.User">
            <summary>
            Gets the User in the private chat.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Query.Journal">
            <summary>
            Gets the journal of messages on the query
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Query.Client">
            <summary>
            Gets the client which the query is on.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Query.PropertyChanged">
            <summary>
            Raised when a property value has changed.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Journal">
            <summary>
            The journal of messages and related information related to an irc channel or query.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Journal.#ctor">
            <summary>
            Creates a new instance of the Journal class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Journal.#ctor(System.Collections.Generic.List{MetaBuilders.Irc.JournalEntry})">
            <summary>
            Creates a new instance of the Journal class starting with the given entry list.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:MetaBuilders.Irc.Journal.InsertItem(System.Int32,MetaBuilders.Irc.JournalEntry)">
            <summary>
            Inserts the given entry into the collection at the given index.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Journal.MaxEntries">
            <summary>
            The maximum number of entries kept in the journal at once.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.CannotUseColorsMessage">
            <summary>
            Sent to a user who is trying to send control codes to a channel that is set +c.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CannotUseColorsMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.CannotUseColorsMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CannotUseColorsMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CannotUseColorsMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CannotUseColorsMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.CannotUseColorsMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.CannotUseColorsMessage.Channel">
            <summary>
            Gets or sets the channel to which the message can't be sent.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.CannotUseColorsMessage.Text">
            <summary>
            Gets or sets the text which wasn't sent to the channel.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.UnknownChannelModeMessage">
            <summary>
            The ErrorMessage received when a ChannelModeMessage was sent with a ChannelMode which the server didn't recognize.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UnknownChannelModeMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.UnknownChannelModeMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UnknownChannelModeMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UnknownChannelModeMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UnknownChannelModeMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.UnknownChannelModeMessage.UnknownMode">
            <summary>
            Gets or sets the mode which the server didn't recognize
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.AcceptListEndReplyMessage">
            <summary>
            An Accept/CallerId system message marking the end of the responses to an AcceptListRequestMessage.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AcceptListEndReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.AcceptListEndReplyMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AcceptListEndReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AcceptListEndReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.NeboResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.NeboResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.NeboResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.NeboResources.AddressCannotBeChanged">
            <summary>
              Looks up a localized string similar to The Address cannot be changed while connected..
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.NeboResources.AlreadyConnected">
            <summary>
              Looks up a localized string similar to Already Connected To Another Server.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.NeboResources.AlreadyConnectToAnotherClient">
            <summary>
              Looks up a localized string similar to Already Connected To Another Client.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.NeboResources.BufferSizeIsLimited">
            <summary>
              Looks up a localized string similar to BufferSize is limited to 8192.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.NeboResources.CannotReadFromFile">
            <summary>
              Looks up a localized string similar to Cannot Read From File.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.NeboResources.ChannelCannotBeEmpty">
            <summary>
              Looks up a localized string similar to Channel Cannot Be Empty.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.NeboResources.ConnectionCanNotBeWrittenToYet">
            <summary>
              Looks up a localized string similar to The connection can not be written to yet. Wait for the Connected event..
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.NeboResources.CouldNotParseMessage">
            <summary>
              Looks up a localized string similar to Could not parse message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.NeboResources.EncodingCannotBeChanged">
            <summary>
              Looks up a localized string similar to The Encoding cannot be changed while connected..
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.NeboResources.ErrorMessageNumericsMustBeBetween">
            <summary>
              Looks up a localized string similar to ErrorMessage numerics must be between 400 and 600.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.NeboResources.MessageEmptyOrTooLong">
            <summary>
              Looks up a localized string similar to A message should not be empty, nor greater than 512 characters. This message was {0} characters long..
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.NeboResources.MessagesAreLimitedInSize">
            <summary>
              Looks up a localized string similar to Messages are limited to 512 characters.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.NeboResources.ModeActionDoesNotExist">
            <summary>
              Looks up a localized string similar to ModeAction &apos;{0}&apos; does not exist..
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.NeboResources.ObjectMustBeOfType">
            <summary>
              Looks up a localized string similar to Object must be of type {0}.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.NeboResources.PortCannotBeChanged">
            <summary>
              Looks up a localized string similar to The Port cannot be changed while connected..
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.NeboResources.ServerDoesNotSupportAccept">
            <summary>
              Looks up a localized string similar to Server does not support accept.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.NeboResources.ServerDoesNotSupportExtendedListParameter">
            <summary>
              Looks up a localized string similar to Server does not support extended list parameter &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.NeboResources.ServerDoesNotSupportMonitor">
            <summary>
              Looks up a localized string similar to Server does not support monitor.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.NeboResources.ServerDoesNotSupportWatch">
            <summary>
              Looks up a localized string similar to Server does not support watch.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.NeboResources.SslCannotBeChanged">
            <summary>
              Looks up a localized string similar to The Ssl property cannot be changed while connected..
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.NeboResources.TargetcannotBeEmpty">
            <summary>
              Looks up a localized string similar to Target Cannot Be Empty.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.NeboResources.UserIsNotInChannel">
            <summary>
              Looks up a localized string similar to User &apos;{0}&apos; is not in channel &apos;{1}&apos;.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.ReceiveWallopsMode">
            <summary>
            This mode signifies that the user will receive wallop messages.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ReceiveWallopsMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.ReceiveWallopsMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ReceiveWallopsMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.ReceiveWallopsMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.ReceiveWallopsMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WallchopsMessage">
            <summary>
            This message is sent to all channel operators.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WallchopsMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WallchopsMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WallchopsMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WallchopsMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WallchopsMessage.Text">
            <summary>
            Gets or sets the text of the <see cref="T:MetaBuilders.Irc.Messages.WallchopsMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WallchopsMessage.Channel">
            <summary>
            Gets or sets the channel being targeted by the message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WallchopsMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.YourHostMessage">
            <summary>
            This message is sent directly after connecting, 
            giving the client information about the server software in use.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.YourHostMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.YourHostMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.YourHostMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.YourHostMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.YourHostMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.YourHostMessage.ServerName">
            <summary>
            Gets or sets the name of the software the server is running.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.YourHostMessage.Version">
            <summary>
            Gets or sets the version of the software the server is running.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.TopicReplyMessage">
            <summary>
            The reply for the <see cref="T:MetaBuilders.Irc.Messages.TopicMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TopicReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.TopicReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TopicReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TopicReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TopicReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TopicReplyMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.TopicReplyMessage.Channel">
            <summary>
            Gets or sets the channel referenced.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.TopicReplyMessage.Topic">
            <summary>
            Gets or sets the topic of the channel.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.PingMessage">
            <summary>
            The PingMessage is used to test the presence of an active client at the other end of the connection.
            </summary>
            <remarks>
            PingMessage is sent at regular intervals if no other activity detected coming from a connection. 
            If a connection fails to respond to a PingMessage within a set amount of time, that connection is closed.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.PingMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.PingMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.PingMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.PingMessage.Target">
            <summary>
            Gets or sets the target of the ping.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.PingMessage.ForwardServer">
            <summary>
            Gets or sets the server that the ping should be forwarded to.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.PingMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.IrcxMessage">
            <summary>
            Queries the server to see if it supports the Ircx extension, and sets the client into ircx mode if it does.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IrcxMessage.#ctor">
            <summary>
            Creates a new instance of the IrcxMessage class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IrcxMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.IrcxMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.PingRequestMessage">
            <summary>
            A client-to-client ping request message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.PingRequestMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.PingRequestMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.PingRequestMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.PingRequestMessage.Parse(System.String)">
            <summary>
            Parses the given string to populate this <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.PingRequestMessage.TimeStamp">
            <summary>
            The custom timestamp to send in the ping request.
            </summary>
            <remarks>
            The ping reply should have this same exact timestamp,
            so you could subtract the original timestamp with the
            current one to determine the lag time.
            </remarks>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.PingRequestMessage.ExtendedData">
            <summary>
            Gets the data payload of the Ctcp request.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ActionRequestMessage">
            <summary>
            This is much like the <see cref="T:MetaBuilders.Irc.Messages.ChatMessage"/> message, 
            except the intent is to describe an "action" that the sender is doing.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ActionRequestMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ActionRequestMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ActionRequestMessage.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ActionRequestMessage"/> class with the given text.
            </summary>
            <param name="text">The text of the action.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ActionRequestMessage.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ActionRequestMessage"/> class with the given text and target.
            </summary>
            <param name="text">The text of the action.</param>
            <param name="target">The target of the action.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ActionRequestMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ActionRequestMessage.Parse(System.String)">
            <summary>
            Parses the given string to populate this <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ActionRequestMessage.Text">
            <summary>
            Gets or sets the communicated text of this <see cref="T:MetaBuilders.Irc.Messages.ActionRequestMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ActionRequestMessage.ExtendedData">
            <summary>
            Gets the data payload of the Ctcp request.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Network.ConnectionDataEventArgs">
            <summary>
            Provides data for connection events that carry a data payload.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Network.ConnectionDataEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ConnectionDataEventArgs class with the given data.
            </summary>
            <param name="data">The <see cref="P:MetaBuilders.Irc.Network.ConnectionDataEventArgs.Data"/> <see cref="T:System.String"/> received by the <see cref="T:MetaBuilders.Irc.Network.ClientConnection"/>.</param>
        </member>
        <member name="P:MetaBuilders.Irc.Network.ConnectionDataEventArgs.Data">
            <summary>
            Gets the <see cref="P:MetaBuilders.Irc.Network.ConnectionDataEventArgs.Data"/> received by the the <see cref="T:MetaBuilders.Irc.Network.ClientConnection"/>.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.TooManyLinesMessage">
            <summary>
            The ErrorMessage sent when a command would result in too many lines in the reply.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TooManyLinesMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.TooManyLinesMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TooManyLinesMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TooManyLinesMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TooManyLinesMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.TooManyLinesMessage.Command">
            <summary>
            Gets or sets the command which caused the error.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ChannelCreationTimeMessage">
            <summary>
            The message received informing the user of a channel's creation time.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelCreationTimeMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ChannelCreationTimeMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelCreationTimeMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelCreationTimeMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelCreationTimeMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelCreationTimeMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelCreationTimeMessage.Channel">
            <summary>
            Gets or sets the channel reffered to.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelCreationTimeMessage.TimeCreated">
            <summary>
            Gets or sets the time which the channel was created.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.RegisteredNicksOnlyMode">
            <summary>
            When this mode is set, 
            new members are only accepted if their nick is registered.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.RegisteredNicksOnlyMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.RegisteredNicksOnlyMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.RegisteredNicksOnlyMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.RegisteredNicksOnlyMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.RegisteredNicksOnlyMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.VersionMessage">
            <summary>
            The <see cref="T:MetaBuilders.Irc.Messages.VersionMessage"/> is used to query the version of the server program.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.VersionMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.VersionMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.VersionMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WhoWasUserReplyMessage">
            <summary>
            The reply to a <see cref="T:MetaBuilders.Irc.Messages.WhoWasMessage"/> query.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoWasUserReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.WhoWasUserReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoWasUserReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoWasUserReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoWasUserReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoWasUserReplyMessage.User">
            <summary>
            Gets or sets the User being examined.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.MotdReplyMessage">
            <summary>
            One line of data in a reply to the <see cref="T:MetaBuilders.Irc.Messages.MotdMessage"/> query.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MotdReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.MotdReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MotdReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MotdReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MotdReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.MotdReplyMessage.Text">
            <summary>
            Gets or sets the text of the motd line.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ListReplyMessage">
            <summary>
            A single reply to the <see cref="T:MetaBuilders.Irc.Messages.ListMessage"/> query.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ListReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ListReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ListReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ListReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ListReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ListReplyMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ListReplyMessage.Channel">
            <summary>
            Gets or sets the channel for this reply.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ListReplyMessage.MemberCount">
            <summary>
            Gets or sets the number of people in the channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ListReplyMessage.Topic">
            <summary>
            Gets or sets the topic of the channel.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.GlobalUsersReplyMessage">
            <summary>
            This message indicates the number of network-wide users.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.GlobalUsersReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.GlobalUsersReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.GlobalUsersReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.GlobalUsersReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.GlobalUsersReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.GlobalUsersReplyMessage.UserCount">
            <summary>
            Gets or sets the number of global users.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.GlobalUsersReplyMessage.UserLimit">
            <summary>
            Gets or sets the maximum number of users for the network.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.NoHostPermissionMessage">
            <summary>
            Returned to a client which attempts to register with a server which has not been setup to allow connections from which the host attempted connection.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoHostPermissionMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.NoHostPermissionMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoHostPermissionMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NoHostPermissionMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.PongMessage">
            <summary>
            PongMessage is a reply to ping message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.PongMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.PongMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.PongMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.PongMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.PongMessage.Target">
            <summary>
            Gets or sets the target of the pong.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.PongMessage.ForwardServer">
            <summary>
            Gets or sets the server that the ping should be forwarded to.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.IsOnMessage">
            <summary>
            The IsOnMessage provides a quick and efficient means to get a response about whether a given nickname is currently on IRC.
            </summary>
            <remarks>
            The server will reply with a <see cref="T:MetaBuilders.Irc.Messages.IsOnReplyMessage"/>.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IsOnMessage.#ctor">
            <summary>
            Creates a new instance of the IsOnMessage class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IsOnMessage.#ctor(System.String[])">
            <summary>
            Creates a new instance of the IsOnMessage class with the given nicks.
            </summary>
            <param name="nicks"></param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IsOnMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IsOnMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IsOnMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.IsOnMessage.Nicks">
            <summary>
            Gets the collection of nicks to query for.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.IsOnMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.IsIrcxMessage">
            <summary>
            Queries the server to see if it supports the Ircx extension without changing the ircx mode.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IsIrcxMessage.#ctor">
            <summary>
            Creates a new instance of the IsIrcxMessage class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.IsIrcxMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.IsIrcxMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.UserNotificationMessage">
            <summary>
            The UserNotificationMessage is used at the beginning of connection to specify the username, hostname and realname of a new user.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserNotificationMessage.CanParse(System.String)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserNotificationMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserNotificationMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserNotificationMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.UserNotificationMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.UserNotificationMessage.UserName">
            <summary>
            Gets or sets the UserName of client.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.UserNotificationMessage.InitialInvisibility">
            <summary>
            Gets or sets if the client is initialized with a user mode of invisible.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.UserNotificationMessage.InitialWallops">
            <summary>
            Gets or sets if the client is initialized with a user mode of receiving wallops.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.UserNotificationMessage.RealName">
            <summary>
            Gets or sets the real name of the client.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.TopicMessage">
            <summary>
            The <see cref="T:MetaBuilders.Irc.Messages.TopicMessage"/> is used to change or view the topic of a channel. 
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TopicMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.TopicMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TopicMessage.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.TopicMessage"/> class for the given channel and topic.
            </summary>
            <param name="channel">The channel to affect.</param>
            <param name="topic">The new topic to set.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TopicMessage.Validate(MetaBuilders.Irc.ServerSupport)">
            <summary>
            Validates this message against the given server support
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TopicMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TopicMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parse the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TopicMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.TopicMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.TopicMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.TopicMessage.Channel">
            <summary>
            Gets or sets the channel affected
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.TopicMessage.Topic">
            <summary>
            Gets or sets the new Topic to apply
            </summary>
            <remarks>
            If Topic is blank, the server will send a <see cref="T:MetaBuilders.Irc.Messages.TopicReplyMessage"/> and probably a <see cref="T:MetaBuilders.Irc.Messages.TopicSetReplyMessage"/>,
            telling you what the current topic is, who set it, and when.
            </remarks>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.DccChatRequestMessage">
            <summary>
            This message is a request to start a dcc chat.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.DccChatRequestMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.DccChatRequestMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.DccChatRequestMessage.CanParseDccCommand(System.String)">
            <summary>
            Determines if the message's DCC command is compatible with this message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.DccChatRequestMessage.Parse(System.String)">
            <summary>
            Parses the given string to populate this <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.DccChatRequestMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.DccChatRequestMessage.DccCommand">
            <summary>
            Gets the dcc sub-command.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.DccChatRequestMessage.DccArgument">
            <summary>
            Gets the dcc sub-command's argument.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.DccChatRequestMessage.Secure">
            <summary>
            Gets or sets if the dcc connection should use SSL.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.QueryCollection">
            <summary>
            A collection of <see href="Query" /> objects.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.QueryCollection.FindQuery(MetaBuilders.Irc.User)">
            <summary>
            Finds the <see href="Query" /> instance within the colleciton which is with the given user.
            </summary>
            <returns>The found query, or null.</returns>
        </member>
        <member name="M:MetaBuilders.Irc.QueryCollection.EnsureQuery(MetaBuilders.Irc.User,MetaBuilders.Irc.Client)">
            <summary>
            Either finds or creates a <see href="Query" /> instance for the given <see href="User" /> on the given <see href="Client" />.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.NickChangeTooFastMessage">
            <summary>
            The ErrorMessage sent when a user tries to change his nick too many times too quickly.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NickChangeTooFastMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.NickChangeTooFastMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NickChangeTooFastMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NickChangeTooFastMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NickChangeTooFastMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.NickChangeTooFastMessage.Nick">
            <summary>
            Gets or sets the Nick which was attempted
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.NickChangeTooFastMessage.Seconds">
            <summary>
            Gets or sets the number of seconds which must be waited before attempting again.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ChannelKeyAlreadySetMessage">
            <summary>
            The ErrorMessage sent when attempting to set a key on a channel which already has a key set.
            </summary>
            <remarks>
            A channel must have its key removed before setting a new one.
            This is done with a ChannelModeMessage and the KeyMode mode.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelKeyAlreadySetMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.ChannelKeyAlreadySetMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelKeyAlreadySetMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelKeyAlreadySetMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelKeyAlreadySetMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelKeyAlreadySetMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelKeyAlreadySetMessage.Channel">
            <summary>
            Gets or sets the channel which has the key set
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Mp3RequestMessage">
            <summary>
            An SPR Jukebox message that notifies the recipient of the senders available mp3 file.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Mp3RequestMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Mp3RequestMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Mp3RequestMessage.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ActionRequestMessage"/> class with the given text and target.
            </summary>
            <param name="target">The target of the action.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Mp3RequestMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Mp3RequestMessage.Parse(System.String)">
            <summary>
            Parses the given string to populate this <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Mp3RequestMessage.FileName">
            <summary>
            Gets or sets the filename of the mp3 being shared.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Mp3RequestMessage.ExtendedData">
            <summary>
            Gets the data payload of the Ctcp request.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.ServerOperatorMode">
            <summary>
            This mode signifies that the user is an operator on the current server.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ServerOperatorMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.ServerOperatorMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ServerOperatorMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.ServerOperatorMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.ServerOperatorMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WhoIsOperReplyMessage">
            <summary>
            A reply to a <see cref="T:MetaBuilders.Irc.Messages.WhoIsMessage"/> when the user is an irc operator.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsOperReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.WhoIsOperReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsOperReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsOperReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WhoIsOperReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WhoIsOperReplyMessage.Nick">
            <summary>
            Gets or sets the Nick of the user being examined.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.UserHostReplyMessage">
            <summary>
            Reply for the <see cref="T:MetaBuilders.Irc.Messages.UserHostMessage"/> to list replies to the query list.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserHostReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.UserHostReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserHostReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserHostReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserHostReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.UserHostReplyMessage.Users">
            <summary>
            Gets the list of replies in the message.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.NamesReplyMessage">
            <summary>
            A single reply to the <see cref="T:MetaBuilders.Irc.Messages.NamesMessage"/> query.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NamesReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.NamesReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NamesReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NamesReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NamesReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NamesReplyMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.NamesReplyMessage.Visibility">
            <summary>
            Gets or sets the visibility of the channel specified in the reply.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.NamesReplyMessage.Channel">
            <summary>
            Gets or sets the name of the channel specified in the reply.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.NamesReplyMessage.Nicks">
            <summary>
            Gets the collection of nicks in the channel.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.NamesReplyMessage.ChannelVisibility">
            <summary>
            The list of channel visibility settings for the <see cref="T:MetaBuilders.Irc.Messages.NamesReplyMessage"/>.
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Messages.NamesReplyMessage.ChannelVisibility.Secret">
            <summary>
            The channel is in <see cref="T:MetaBuilders.Irc.Messages.Modes.SecretMode"/>
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Messages.NamesReplyMessage.ChannelVisibility.Private">
            <summary>
            The channel is in <see cref="T:MetaBuilders.Irc.Messages.Modes.PrivateMode"/>
            </summary>
        </member>
        <member name="F:MetaBuilders.Irc.Messages.NamesReplyMessage.ChannelVisibility.Public">
            <summary>
            The channel has no hidden modes applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ListStartReplyMessage">
            <summary>
            Marks the start of the replies to the <see cref="T:MetaBuilders.Irc.Messages.ListMessage"/> query.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ListStartReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.ListStartReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ListStartReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ListStartReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.NickCollisionMessage">
            <summary>
            Returned by a server to a client when it detects a nickname collision.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NickCollisionMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.NickCollisionMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NickCollisionMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NickCollisionMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NickCollisionMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.NickCollisionMessage.Nick">
            <summary>
            Gets or sets the nick which was already taken.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.KnockRequestMessage">
            <summary>
            The notification to the channel that a user has knocked on their channel.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.KnockRequestMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.KnockRequestMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.KnockRequestMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.KnockRequestMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.KnockRequestMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.KnockRequestMessage.Channel">
            <summary>
            Gets or sets the channel that was knocked on.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.KnockRequestMessage.Knocker">
            <summary>
            Gets or sets the user which knocked on the channel.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.NamesMessage">
            <summary>
            By using the NamesMessage, a user can list all nicknames that are visible to them on any channel that they can see.
            </summary>
            <remarks>
            Channel names which they can see are those which aren't private ( <see cref="T:MetaBuilders.Irc.Messages.Modes.PrivateMode"/> ) or secret ( <see cref="T:MetaBuilders.Irc.Messages.Modes.SecretMode"/> ) or those which they are actually on.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NamesMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NamesMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.NamesMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.NamesMessage.Channels">
            <summary>
            Gets the channels that should be queried for their users.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.NamesMessage.Command">
            <summary>
            Gets the Irc command associated with this message.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.InvitationExceptionMode">
            <summary>
            For channels which have the invite-only flag set (<see cref="T:MetaBuilders.Irc.Messages.Modes.InviteOnlyMode"/>), 
            users whose address matches an invitation mask set for the channel are allowed 
            to join the channel without any invitation.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.InvitationExceptionMode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.InvitationExceptionMode"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.InvitationExceptionMode.#ctor(MetaBuilders.Irc.Messages.ModeAction)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.InvitationExceptionMode"/> class with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.InvitationExceptionMode.#ctor(MetaBuilders.Irc.Messages.ModeAction,MetaBuilders.Irc.User)">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.Modes.InvitationExceptionMode"/> class 
            with the given <see cref="T:MetaBuilders.Irc.Messages.ModeAction"/> and <see cref="T:MetaBuilders.Irc.User"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.Modes.InvitationExceptionMode.Symbol">
            <summary>
            Gets the irc string representation of the mode being changed or applied.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.Modes.ChannelModeCollection">
            <summary>
                <para>
                  A collection that stores <see cref="T:MetaBuilders.Irc.Messages.Modes.ChannelMode"/> objects.
               </para>
            </summary>
            <seealso cref="T:MetaBuilders.Irc.Messages.Modes.ChannelModeCollection"/>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.Modes.ChannelModeCollection.ResetWith(MetaBuilders.Irc.Messages.Modes.ChannelModeCollection)">
            <summary>
            Clears the current collection and adds the given modes
            </summary>
            <param name="newModes"></param>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.DccResumeRequestMessage">
            <summary>
            This message is a request to resume sending a file previously, but not completely sent to the requestor.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.DccResumeRequestMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.DccResumeRequestMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.DccResumeRequestMessage.CanParse(System.String)">
            <summary>
            Determines if the message can be parsed by this type.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.DccResumeRequestMessage.CanParseDccCommand(System.String)">
            <summary>
            Determines if the message's DCC command is compatible with this message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.DccResumeRequestMessage.Parse(System.String)">
            <summary>
            Parses the given string to populate this <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.DccResumeRequestMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.DccResumeRequestMessage.ExtendedData">
            <summary>
            Gets the data payload of the Ctcp request.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.DccResumeRequestMessage.DccCommand">
            <summary>
            Gets the dcc sub-command.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.DccResumeRequestMessage.FileName">
            <summary>
            Gets or sets the name of the file being sent.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.DccResumeRequestMessage.Port">
            <summary>
            Gets or sets the port the connection should be on.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.DccResumeRequestMessage.Position">
            <summary>
            Gets or sets the position in the file at which to resume sending.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Network.ClientConnection">
            <summary>
            Represents a network connection to an irc server.
            </summary>
            <remarks>
            Use the <see cref="T:MetaBuilders.Irc.Network.ClientConnection"/> class to send a <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> to an irc server, and to be notified when it returns a <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/>.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Network.ClientConnection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MetaBuilders.Irc.Network.ClientConnection"/> class.
            </summary>
            <remarks>With this Constructor, the <see cref="P:MetaBuilders.Irc.Network.ClientConnection.Address"/> default to 127.0.0.1, and the <see cref="P:MetaBuilders.Irc.Network.ClientConnection.Port"/> defaults to 6667.</remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Network.ClientConnection.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MetaBuilders.Irc.Network.ClientConnection"/> class with the given address on the given port.
            </summary>
            <param name="address">The network address to connect to.</param>
            <param name="port">The port to connect on.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Network.ClientConnection.Connect">
            <summary>
            Creates a network connection to the current <see cref="P:MetaBuilders.Irc.Network.ClientConnection.Address"/> and <see cref="P:MetaBuilders.Irc.Network.ClientConnection.Port"/>
            </summary>
            <remarks>
            Only use this overload if your application is not a Windows.Forms application, you've set the <see cref="P:MetaBuilders.Irc.Network.ClientConnection.SynchronizationObject"/> property, or you want to handle threading issues yourself.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Network.ClientConnection.Connect(System.ComponentModel.ISynchronizeInvoke)">
            <summary>
            Creates a network connection to the current <see cref="P:MetaBuilders.Irc.Network.ClientConnection.Address"/> and <see cref="P:MetaBuilders.Irc.Network.ClientConnection.Port"/>
            </summary>
            <remarks>
            <p>When using this class from an application, 
            you need to pass in a control so that data-receiving thread can sync with your application.</p>
            <p>If calling this from a form or other control, just pass in the current instance.</p>
            </remarks>
            <example>
            <code>
            [C#]
            client.Connection.Connect(this);
            
            [VB]
            client.Connection.Connect(Me)
            </code>
            </example>
        </member>
        <member name="M:MetaBuilders.Irc.Network.ClientConnection.Disconnect">
            <summary>
            Closes the current network connection.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Network.ClientConnection.DisconnectForce">
            <summary>
            Forces closing the current network connection and kills the thread running it.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Network.ClientConnection.Write(System.String)">
            <summary>
            Sends the given string over the network
            </summary>
            <param name="data">The <see cref="T:System.String"/> to send.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Network.ClientConnection.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the <see cref="T:MetaBuilders.Irc.Network.ClientConnection"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Network.ClientConnection.OnConnecting(System.EventArgs)">
            <summary>
            Raises the <see cref="E:MetaBuilders.Irc.Network.ClientConnection.Connecting"/> event of the <see cref="T:MetaBuilders.Irc.Network.ClientConnection"/> object.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Network.ClientConnection.OnConnected(System.EventArgs)">
            <summary>
            Raises the <see cref="E:MetaBuilders.Irc.Network.ClientConnection.Connected"/> event of the <see cref="T:MetaBuilders.Irc.Network.ClientConnection"/> object.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Network.ClientConnection.OnDataReceived(MetaBuilders.Irc.Network.ConnectionDataEventArgs)">
            <summary>
            Raises the <see cref="E:MetaBuilders.Irc.Network.ClientConnection.DataReceived"/> event of the <see cref="T:MetaBuilders.Irc.Network.ClientConnection"/> object.
            </summary>
            <param name="e">A <see cref="T:MetaBuilders.Irc.Network.ConnectionDataEventArgs"/> that contains the data.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Network.ClientConnection.OnDataSent(MetaBuilders.Irc.Network.ConnectionDataEventArgs)">
            <summary>
            Raises the <see cref="E:MetaBuilders.Irc.Network.ClientConnection.DataSent"/> event of the <see cref="T:MetaBuilders.Irc.Network.ClientConnection"/> object.
            </summary>
            <param name="data">A <see cref="T:MetaBuilders.Irc.Network.ConnectionDataEventArgs"/> that contains the data.</param>
        </member>
        <member name="M:MetaBuilders.Irc.Network.ClientConnection.OnDisconnected(MetaBuilders.Irc.Network.ConnectionDataEventArgs)">
            <summary>
            Raises the <see cref="E:MetaBuilders.Irc.Network.ClientConnection.Disconnected"/> event of the <see cref="T:MetaBuilders.Irc.Network.ClientConnection"/> object.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Network.ClientConnection.ReceiveData">
            <summary>
            This method listens for data over the network until the Connection.State is Disconnected.
            </summary>
            <remarks>
            ReceiveData runs in its own thread.
            </remarks>
        </member>
        <member name="E:MetaBuilders.Irc.Network.ClientConnection.DataReceived">
            <summary>
            Occurs when the <see cref="T:MetaBuilders.Irc.Network.ClientConnection"/> recieves data.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Network.ClientConnection.DataSent">
            <summary>
            Occurs when the <see cref="T:MetaBuilders.Irc.Network.ClientConnection"/> sends data.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Network.ClientConnection.Connecting">
            <summary>
            Occurs when starting the connecting sequence to a server
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Network.ClientConnection.Connected">
            <summary>
            Occurs after the connecting sequence is successful.
            </summary>
        </member>
        <member name="E:MetaBuilders.Irc.Network.ClientConnection.Disconnected">
            <summary>
            Occurs when the disconnecting sequence is successful.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Network.ClientConnection.Address">
            <summary>
            Gets or sets the internet address which the current <see cref="T:MetaBuilders.Irc.Network.ClientConnection"/> uses.
            </summary>
            <remarks>A <see cref="T:System.NotSupportedException"/> will be thrown if an attempt is made to change the <see cref="P:MetaBuilders.Irc.Network.ClientConnection.Address"/> if the <see cref="P:MetaBuilders.Irc.Network.ClientConnection.Status"/> is not <see cref="F:MetaBuilders.Irc.Network.ConnectionStatus.Disconnected"/>.</remarks>
        </member>
        <member name="P:MetaBuilders.Irc.Network.ClientConnection.Port">
            <summary>
            Gets or sets the port which the <see cref="T:MetaBuilders.Irc.Network.ClientConnection"/> will communicate over.
            </summary>
            <remarks>
            <para>For irc, the <see cref="P:MetaBuilders.Irc.Network.ClientConnection.Port"/> is generally between 6667 and 7000</para>
            <para>A <see cref="T:System.NotSupportedException"/> will be thrown if an attempt is made to change the <see cref="P:MetaBuilders.Irc.Network.ClientConnection.Port"/> if the <see cref="P:MetaBuilders.Irc.Network.ClientConnection.Status"/> is not <see cref="F:MetaBuilders.Irc.Network.ConnectionStatus.Disconnected"/>.</para>
            </remarks>
        </member>
        <member name="P:MetaBuilders.Irc.Network.ClientConnection.Status">
            <summary>
            Gets the <see cref="T:MetaBuilders.Irc.Network.ConnectionStatus"/> of the <see cref="T:MetaBuilders.Irc.Network.ClientConnection"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Network.ClientConnection.SynchronizationObject">
            <summary>
            Gets or sets the <see cref="T:System.ComponentModel.ISynchronizeInvoke"/> implementor which will be used to synchronize threads and events.
            </summary>
            <remarks>
            This is usually the main form of the application.
            </remarks>
        </member>
        <member name="P:MetaBuilders.Irc.Network.ClientConnection.Encoding">
            <summary>
            Gets or sets the encoding used by stream reader and writer.
            </summary>
            <remarks>
            Generally, only ASCII and UTF-8 are supported.
            </remarks>
        </member>
        <member name="P:MetaBuilders.Irc.Network.ClientConnection.Ssl">
            <summary>
            Gets or sets if the connection will use SSL to connect to the server
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.UserModeIsReplyMessage">
            <summary>
            This is the reply to an empty <see cref="T:MetaBuilders.Irc.Messages.UserModeMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserModeIsReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.UserModeIsReplyMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserModeIsReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserModeIsReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.UserModeIsReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.UserModeIsReplyMessage.Modes">
            <summary>
            Gets or sets the modes in effect.
            </summary>
            <remarks>
            An example Modes might look like "+i".
            </remarks>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.YouAreBannedFromChannelMessage">
            <summary>
            The ErrorMessage received when attempting to join a channel on which the user is banned.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.YouAreBannedFromChannelMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.YouAreBannedFromChannelMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.YouAreBannedFromChannelMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.YouAreBannedFromChannelMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.YouAreBannedFromChannelMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.YouAreBannedFromChannelMessage.IsTargetedAtChannel(System.String)">
            <summary>
            Determines if the the current message is targeted at the given channel.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.YouAreBannedFromChannelMessage.Channel">
            <summary>
            Gets or sets the channel on which the user is banned
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.CustomListItemRendering`1">
            <summary>
            A delegate which provides custom format rendering for the items in a list.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.WatchedUserIsOfflineMessage">
            <summary>
            A Watch system notification that a user is offline.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.WatchedUserIsOfflineMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.WatchedUserIsOfflineMessage"/>.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.WatchedUserIsOfflineMessage.ChangeMessage">
            <exclude />
        </member>
        <member name="T:MetaBuilders.Irc.Messages.MonitorListReplyMessage">
            <summary>
            A Monitor system message giving you the list of users on your monitor list.
            </summary>
            <remarks>
            You may receive more than 1 of these replies in response to a <see cref="T:MonitorListRequestMessage" />.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitorListReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.MonitorListReplyMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.MonitorListReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.AcceptDoesNotExistMessage">
            <summary>
            The ErrorMessage received when the client attempts to remove a nick from his accept list
            when that nick does not exist on the list.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AcceptDoesNotExistMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.AcceptDoesNotExistMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AcceptDoesNotExistMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AcceptDoesNotExistMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AcceptDoesNotExistMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.AcceptDoesNotExistMessage.Nick">
            <summary>
            Gets or sets the nick which wasn't added
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.AcceptListReplyMessage">
            <summary>
            An Accept/CallerId system message received in response to an AcceptListRequestMessage.
            </summary>
            <remarks>
            You may receive more than 1 of these in response to the request.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AcceptListReplyMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MetaBuilders.Irc.Messages.AcceptListReplyMessage"/>.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AcceptListReplyMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <summary>
            Overrides <see cref="M:MetaBuilders.Irc.Messages.IrcMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)"/>
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AcceptListReplyMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <summary>
            Parses the parameters portion of the message.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.AcceptListReplyMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.AcceptListReplyMessage.Nicks">
            <summary>
            Gets the collection of nicks of the users on the watch list.
            </summary>
        </member>
        <member name="T:MetaBuilders.Irc.Messages.ChannelLimitReachedMessage">
            <summary>
            The ErrorMessage received when attempting to join a channel which has reached its limit of users.
            </summary>
            <remarks>
            A channel can set it's user limit with a ChannelModeMessage containing a LimitMode.
            Once that many users are in the channel, any other users attempting to join will get this reply.
            On some networks, an Invite allows a user to bypass the limit.
            </remarks>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelLimitReachedMessage.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:MetaBuilders.Irc.Messages.ChannelLimitReachedMessage"/> class.
            </summary>
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelLimitReachedMessage.AddParametersToFormat(MetaBuilders.Irc.Messages.IrcMessageWriter)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelLimitReachedMessage.ParseParameters(System.Collections.Specialized.StringCollection)">
            <exclude />
        </member>
        <member name="M:MetaBuilders.Irc.Messages.ChannelLimitReachedMessage.Notify(MetaBuilders.Irc.Messages.MessageConduit)">
            <summary>
            Notifies the given <see cref="T:MetaBuilders.Irc.Messages.MessageConduit"/> by raising the appropriate event for the current <see cref="T:MetaBuilders.Irc.Messages.IrcMessage"/> subclass.
            </summary>
        </member>
        <member name="P:MetaBuilders.Irc.Messages.ChannelLimitReachedMessage.Channel">
            <summary>
            Gets or sets the channel which has reached its limit
            </summary>
        </member>
    </members>
</doc>
